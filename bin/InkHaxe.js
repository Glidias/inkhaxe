// Generated by Haxe 3.3.0
(function ($hx_exports, $global) { "use strict";
$hx_exports["ink"] = $hx_exports["ink"] || {};
$hx_exports["ink"]["runtime"] = $hx_exports["ink"]["runtime"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var InkRuntime = function() { };
InkRuntime.__name__ = ["InkRuntime"];
InkRuntime.main = function() {
};
var List = function() {
	this.length = 0;
};
List.__name__ = ["List"];
List.prototype = {
	add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,last: function() {
		if(this.q == null) {
			return null;
		} else {
			return this.q.item;
		}
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,filter: function(f) {
		var l2 = new List();
		var l = this.h;
		while(l != null) {
			var v = l.item;
			l = l.next;
			if(f(v)) {
				l2.add(v);
			}
		}
		return l2;
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	__class__: _$List_ListNode
};
Math.__name__ = ["Math"];
var Reflect = function() { };
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	toString: function() {
		return this.b;
	}
	,__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var ValueType = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_ds_GenericCell = function(elt,next) {
	this.elt = elt;
	this.next = next;
};
haxe_ds_GenericCell.__name__ = ["haxe","ds","GenericCell"];
haxe_ds_GenericCell.prototype = {
	__class__: haxe_ds_GenericCell
};
var haxe_ds_GenericStack = function() {
};
haxe_ds_GenericStack.__name__ = ["haxe","ds","GenericStack"];
haxe_ds_GenericStack.prototype = {
	iterator: function() {
		var l = this.head;
		return { hasNext : function() {
			return l != null;
		}, next : function() {
			var k = l;
			l = k.next;
			return k.elt;
		}};
	}
	,__class__: haxe_ds_GenericStack
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var ink_random_RNG = function() {
	this._seed = 0;
};
ink_random_RNG.__name__ = ["ink","random","RNG"];
ink_random_RNG.prototype = {
	getSeed: function() {
		return this._seed;
	}
	,setSeed: function(seed) {
		this._seed = seed;
	}
	,random: function() {
		throw new js__$Boot_HaxeError("override for implementation");
	}
	,randomFloat: function() {
		throw new js__$Boot_HaxeError("override for implementation");
	}
	,randomRange: function(min,max) {
		var l = min - .4999;
		return Math.round(l + (max + .4999 - l) * this.randomFloat());
	}
	,randomFloatRange: function(min,max) {
		return min + (max - min) * this.randomFloat();
	}
	,randomSym: function(range) {
		var l = -range - .4999;
		return Math.round(l + (range + .4999 - l) * this.randomFloat());
	}
	,randomFloatSym: function(range) {
		var min = -range;
		return min + (range - min) * this.randomFloat();
	}
	,__class__: ink_random_RNG
};
var ink_random_ParkMiller = function(seed) {
	if(seed == null) {
		seed = 1;
	}
	ink_random_RNG.call(this);
	this.setSeed(seed);
};
ink_random_ParkMiller.__name__ = ["ink","random","ParkMiller"];
ink_random_ParkMiller.__super__ = ink_random_RNG;
ink_random_ParkMiller.prototype = $extend(ink_random_RNG.prototype,{
	setSeed: function(seed) {
		ink_random_RNG.prototype.setSeed.call(this,seed);
		this._fseed = seed;
	}
	,random: function() {
		this._fseed = this._fseed * 16807. % 2147483647.;
		return this._fseed;
	}
	,randomFloat: function() {
		return this.random() / 2147483647.;
	}
	,__class__: ink_random_ParkMiller
});
var ink_random_Limits = function() { };
ink_random_Limits.__name__ = ["ink","random","Limits"];
var ink_runtime_Assert = function() { };
ink_runtime_Assert.__name__ = ["ink","runtime","Assert"];
ink_runtime_Assert.bool = function(result,error) {
	if(!result) {
		throw new js__$Boot_HaxeError(error);
	}
};
var ink_runtime_CallStack = function() {
};
ink_runtime_CallStack.__name__ = ["ink","runtime","CallStack"];
ink_runtime_CallStack.createCallStack = function(rootContentContainer) {
	var me = new ink_runtime_CallStack();
	me.setupCallStack(rootContentContainer);
	return me;
};
ink_runtime_CallStack.createCallStack2 = function(toCopy) {
	var me = new ink_runtime_CallStack();
	me.setupCallStack2(toCopy);
	return me;
};
ink_runtime_CallStack.prototype = {
	get_elements: function() {
		return this.get_callStack();
	}
	,get_currentElement: function() {
		return this.get_callStack()[this.get_callStack().length - 1];
	}
	,get_currentElementIndex: function() {
		return this.get_callStack().length - 1;
	}
	,get_currentThread: function() {
		return this._threads.last();
	}
	,set_currentThread: function(value) {
		if(this._threads.length != 1) {
			throw new js__$Boot_HaxeError("Shouldn't be directly setting the current thread when we have a stack of them");
		}
		this._threads.clear();
		this._threads.add(value);
		return value;
	}
	,get_canPop: function() {
		return this.get_callStack().length > 1;
	}
	,setupCallStack: function(rootContentContainer) {
		this._threads = new List();
		this._threads.add(new ink_runtime_Thread());
		this._threads.first().callstack.push(new ink_runtime_Element(0,rootContentContainer,0));
	}
	,setupCallStack2: function(toCopy) {
		this._threads = new List();
		var i_head = toCopy._threads.h;
		while(i_head != null) {
			var val = i_head.item;
			i_head = i_head.next;
			this._threads.add(val.Copy());
		}
	}
	,SetJsonToken: function(jObject,storyContext) {
		this._threads.clear();
		var jThreads = Reflect.field(jObject,"threads");
		var _g1 = 0;
		var _g = jThreads.length;
		while(_g1 < _g) this._threads.add(ink_runtime_Thread.create(jThreads[_g1++],storyContext));
		this._threadCounter = Reflect.field(jObject,"threadCounter");
	}
	,GetJsonToken: function() {
		var jObject = { };
		var jThreads = [];
		var i_head = this._threads.h;
		while(i_head != null) {
			var val = i_head.item;
			i_head = i_head.next;
			jThreads.push(val.get_jsonToken());
		}
		jObject.threads = jThreads;
		jObject.threadCounter = this._threadCounter;
		return jObject;
	}
	,PushThread: function() {
		var newThread = this.get_currentThread().Copy();
		newThread.threadIndex = this._threadCounter;
		this._threadCounter++;
		this._threads.add(newThread);
	}
	,PopThread: function() {
		if(this.get_canPopThread()) {
			this._threads.remove(this.get_currentThread());
		} else {
			throw new js__$Boot_HaxeError(new ink_runtime_SystemException("Can't pop thread"));
		}
	}
	,get_canPopThread: function() {
		return this._threads.length > 1;
	}
	,Push: function(type) {
		this.get_callStack().push(new ink_runtime_Element(type,this.get_currentElement().currentContainer,this.get_currentElement().currentContentIndex,false));
	}
	,CanPop: function(type) {
		if(!this.get_canPop()) {
			return false;
		}
		if(type == null) {
			return true;
		}
		return this.get_currentElement().type == type;
	}
	,Pop: function(type) {
		if(this.CanPop(type)) {
			this.get_callStack().pop();
			return;
		} else {
			throw new js__$Boot_HaxeError(new ink_runtime_SystemException("Mismatched push/pop in Callstack"));
		}
	}
	,GetTemporaryVariableWithName: function(name,contextIndex) {
		if(contextIndex == null) {
			contextIndex = -1;
		}
		if(contextIndex == -1) {
			contextIndex = this.get_currentElementIndex() + 1;
		}
		var varValue = null;
		var map = this.get_callStack()[contextIndex - 1].temporaryVariables;
		varValue = __map_reserved[name] != null?map.getReserved(name):map.h[name];
		if(varValue != null) {
			return varValue;
		} else {
			return null;
		}
	}
	,SetTemporaryVariable: function(name,value,declareNew,contextIndex) {
		if(contextIndex == null) {
			contextIndex = -1;
		}
		if(contextIndex == -1) {
			contextIndex = this.get_currentElementIndex() + 1;
		}
		var contextElement = this.get_callStack()[contextIndex - 1];
		var tmp;
		if(!declareNew) {
			var _this = contextElement.temporaryVariables;
			tmp = !(__map_reserved[name] != null?_this.existsReserved(name):_this.h.hasOwnProperty(name));
		} else {
			tmp = false;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError(new ink_runtime_StoryException("Could not find temporary variable to set: " + name));
		}
		var _this1 = contextElement.temporaryVariables;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,value);
		} else {
			_this1.h[name] = value;
		}
	}
	,ContextForVariableNamed: function(name) {
		if(this.get_currentElement().temporaryVariables.exists(name)) {
			return this.get_currentElementIndex() + 1;
		} else {
			return 0;
		}
	}
	,ThreadWithIndex: function(index) {
		return ink_runtime_LibUtil.findForList(this._threads,function(t) {
			return t.threadIndex == index;
		});
	}
	,get_callStack: function() {
		return this.get_currentThread().callstack;
	}
	,__class__: ink_runtime_CallStack
	,__properties__: {get_callStack:"get_callStack",get_canPopThread:"get_canPopThread",get_canPop:"get_canPop",set_currentThread:"set_currentThread",get_currentThread:"get_currentThread",get_currentElementIndex:"get_currentElementIndex",get_currentElement:"get_currentElement",get_elements:"get_elements"}
};
var ink_runtime_Element = function(type,container,contentIndex,inExpressionEvaluation) {
	if(inExpressionEvaluation == null) {
		inExpressionEvaluation = false;
	}
	this.currentContainer = container;
	this.currentContentIndex = contentIndex;
	this.inExpressionEvaluation = inExpressionEvaluation;
	this.temporaryVariables = new haxe_ds_StringMap();
	this.type = type;
};
ink_runtime_Element.__name__ = ["ink","runtime","Element"];
ink_runtime_Element.prototype = {
	get_currentObject: function() {
		if(this.currentContainer != null && this.currentContentIndex < this.currentContainer._content.length) {
			return this.currentContainer._content[this.currentContentIndex];
		}
		return null;
	}
	,set_currentObject: function(value) {
		if(value == null) {
			this.currentContainer = null;
			this.currentContentIndex = 0;
			return null;
		}
		var obj = value.parent;
		this.currentContainer = js_Boot.__instanceof(obj,ink_runtime_Container)?obj:null;
		if(this.currentContainer != null) {
			this.currentContentIndex = this.currentContainer._content.indexOf(value);
		}
		if(this.currentContainer == null || this.currentContentIndex == -1) {
			this.currentContainer = js_Boot.__instanceof(value,ink_runtime_Container)?value:null;
			this.currentContentIndex = 0;
		}
		return this.currentContainer._content[this.currentContentIndex];
	}
	,Copy: function() {
		var copy = new ink_runtime_Element(this.type,this.currentContainer,this.currentContentIndex,this.inExpressionEvaluation);
		copy.temporaryVariables = ink_runtime_LibUtil.cloneStrMap(this.temporaryVariables);
		return copy;
	}
	,__class__: ink_runtime_Element
	,__properties__: {set_currentObject:"set_currentObject",get_currentObject:"get_currentObject"}
};
var ink_runtime_Thread = function() {
	this.callstack = [];
};
ink_runtime_Thread.__name__ = ["ink","runtime","Thread"];
ink_runtime_Thread.create = function(jThreadObj,storyContext) {
	var me = new ink_runtime_Thread();
	me.setup(jThreadObj,storyContext);
	return me;
};
ink_runtime_Thread.prototype = {
	setup: function(jThreadObj,storyContext) {
		this.threadIndex = Reflect.field(jThreadObj,"threadIndex") | 0;
		var jThreadCallstack = Reflect.field(jThreadObj,"callstack");
		var _g1 = 0;
		var _g = jThreadCallstack.length;
		while(_g1 < _g) {
			var jElTok = jThreadCallstack[_g1++];
			var pushPopType = Reflect.field(jElTok,"type");
			var currentContainer = null;
			var contentIndex = 0;
			var currentContainerPathStr = null;
			var currentContainerPathStrToken = Reflect.field(jElTok,"cPath");
			if(currentContainerPathStrToken != null) {
				currentContainerPathStr = Std.string(currentContainerPathStrToken);
				currentContainer = ink_runtime_LibUtil.asNoInline(storyContext.ContentAtPath(ink_runtime_Path.createFromString(currentContainerPathStr)),ink_runtime_Container);
				contentIndex = Reflect.field(jElTok,"idx") | 0;
			}
			var inExpressionEvaluation = Reflect.field(jElTok,"exp");
			var el = new ink_runtime_Element(pushPopType,currentContainer,contentIndex,inExpressionEvaluation);
			el.temporaryVariables = ink_runtime_Json.JObjectToDictionaryRuntimeObjs(Reflect.field(jElTok,"temp"));
			this.callstack.push(el);
		}
		var prevContentObjPath = Reflect.field(jThreadObj,"previousContentObject");
		if(prevContentObjPath != null) {
			this.previousContentObject = storyContext.ContentAtPath(ink_runtime_Path.createFromString(Std.string(prevContentObjPath)));
		}
	}
	,Copy: function() {
		var copy = new ink_runtime_Thread();
		copy.threadIndex = this.threadIndex;
		var _g1 = 0;
		var _g = this.callstack.length;
		while(_g1 < _g) copy.callstack.push(this.callstack[_g1++].Copy());
		copy.previousContentObject = this.previousContentObject;
		return copy;
	}
	,get_jsonToken: function() {
		var threadJObj = { };
		var jThreadCallstack = [];
		var _g1 = 0;
		var _g = this.callstack.length;
		while(_g1 < _g) {
			var el = this.callstack[_g1++];
			var jObj = { };
			if(el.currentContainer != null) {
				jObj.cPath = el.currentContainer.get_path().get_componentsString();
				jObj.idx = el.currentContentIndex;
			}
			jObj.exp = el.inExpressionEvaluation;
			jObj.type = el.type;
			jObj.temp = ink_runtime_Json.DictionaryRuntimeObjsToJObject(el.temporaryVariables);
			jThreadCallstack.push(jObj);
		}
		threadJObj.callstack = jThreadCallstack;
		threadJObj.threadIndex = this.threadIndex;
		if(this.previousContentObject != null) {
			threadJObj.previousContentObject = Std.string(this.previousContentObject.get_path());
		}
		return threadJObj;
	}
	,__class__: ink_runtime_Thread
	,__properties__: {get_jsonToken:"get_jsonToken"}
};
var ink_runtime_RObject = function() {
};
ink_runtime_RObject.__name__ = ["ink","runtime","RObject"];
ink_runtime_RObject.EQUALS = function(a,b) {
	return a == b;
};
ink_runtime_RObject.notEquals = function(a,b) {
	return a != b;
};
ink_runtime_RObject.prototype = {
	get_debugMetadata: function() {
		if(this._debugMetadata == null) {
			if(this.parent != null) {
				return this.parent.get_debugMetadata();
			}
		}
		return this._debugMetadata;
	}
	,set_debugMetadata: function(value) {
		return this._debugMetadata = value;
	}
	,DebugLineNumberOfPath: function(path) {
		if(path == null) {
			return null;
		}
		var root = this.get_rootContentContainer();
		if(root != null) {
			var targetContent = root.ContentAtPath(path);
			if(targetContent != null) {
				var dm = targetContent.get_debugMetadata();
				if(dm != null) {
					return dm.startLineNumber;
				}
			}
		}
		return null;
	}
	,get_path: function() {
		if(this._path == null) {
			if(this.parent == null) {
				this._path = new ink_runtime_Path();
			} else {
				var comps = new haxe_ds_GenericStack();
				var child = this;
				var obj = child.parent;
				var container = js_Boot.__instanceof(obj,ink_runtime_Container)?obj:null;
				while(container != null) {
					var namedChild = js_Boot.__instanceof(child,ink_runtime_INamedContent)?child:null;
					if(namedChild != null && namedChild.get_hasValidName()) {
						comps.head = new haxe_ds_GenericCell(ink_runtime_Component.createFromName(namedChild.name),comps.head);
					} else {
						comps.head = new haxe_ds_GenericCell(ink_runtime_Component.createFromIndex(container._content.indexOf(child)),comps.head);
					}
					child = container;
					var obj1 = container.parent;
					if(js_Boot.__instanceof(obj1,ink_runtime_Container)) {
						container = obj1;
					} else {
						container = null;
					}
				}
				this._path = ink_runtime_Path.createFromComponentStack(comps);
			}
		}
		return this._path;
	}
	,ResolvePath: function(path) {
		if(path.isRelative) {
			var nearestContainer = js_Boot.__instanceof(this,ink_runtime_Container)?this:null;
			if(nearestContainer == null) {
				if(this.parent == null) {
					throw new js__$Boot_HaxeError("Can't resolve relative path because we don't have a parent");
				}
				var obj = this.parent;
				if(js_Boot.__instanceof(obj,ink_runtime_Container)) {
					nearestContainer = obj;
				} else {
					nearestContainer = null;
				}
				if(nearestContainer == null) {
					throw new js__$Boot_HaxeError("Expected parent to be a container");
				}
				if(!path.components[0].get_isParent()) {
					throw new js__$Boot_HaxeError("Is parent assertion failed");
				}
				path = path.get_tail();
			}
			return nearestContainer.ContentAtPath(path);
		} else {
			return this.get_rootContentContainer().ContentAtPath(path);
		}
	}
	,ConvertPathToRelative: function(globalPath) {
		var ownPath = this.get_path();
		var minPathLength = ink_runtime_LibUtil.minI(globalPath.components.length,ownPath.components.length);
		var lastSharedPathCompIndex = -1;
		var _g1 = 0;
		while(_g1 < minPathLength) {
			var i = _g1++;
			if(ownPath.components[i].Equals(globalPath.components[i])) {
				lastSharedPathCompIndex = i;
			} else {
				break;
			}
		}
		if(lastSharedPathCompIndex == -1) {
			return globalPath;
		}
		var numUpwardsMoves = ownPath.components.length - 1 - lastSharedPathCompIndex;
		var newPathComps = [];
		var _g11 = 0;
		while(_g11 < numUpwardsMoves) {
			++_g11;
			newPathComps.push(ink_runtime_Component.ToParent());
		}
		var _g12 = lastSharedPathCompIndex + 1;
		var _g = globalPath.components.length;
		while(_g12 < _g) newPathComps.push(globalPath.components[_g12++]);
		return ink_runtime_Path.createFromComponents(newPathComps,true);
	}
	,CompactPathString: function(otherPath) {
		var globalPathStr = null;
		var relativePathStr = null;
		if(otherPath.isRelative) {
			relativePathStr = otherPath.get_componentsString();
			globalPathStr = this.get_path().PathByAppendingPath(otherPath).get_componentsString();
		} else {
			relativePathStr = this.ConvertPathToRelative(otherPath).get_componentsString();
			globalPathStr = otherPath.get_componentsString();
		}
		if(relativePathStr.length < globalPathStr.length) {
			return relativePathStr;
		} else {
			return globalPathStr;
		}
	}
	,get_rootContentContainer: function() {
		var ancestor = this;
		while(ancestor.parent != null) ancestor = ancestor.parent;
		return js_Boot.__instanceof(ancestor,ink_runtime_Container)?ancestor:null;
	}
	,Copy: function() {
		throw new js__$Boot_HaxeError(new ink_runtime_SystemNotImplementedException(Type["typeof"](this)[0] + " doesn't support copying"));
	}
	,SetChildReturnValue: function(obj,value) {
		if(obj != null) {
			obj.parent = null;
		}
		obj = value;
		if(value != null) {
			value.parent = this;
		}
		return value;
	}
	,Equals: function(obj) {
		return obj == this;
	}
	,__class__: ink_runtime_RObject
	,__properties__: {get_rootContentContainer:"get_rootContentContainer",get_path:"get_path",set_debugMetadata:"set_debugMetadata",get_debugMetadata:"get_debugMetadata"}
};
var ink_runtime_Choice = function() {
	ink_runtime_RObject.call(this);
};
ink_runtime_Choice.__name__ = ["ink","runtime","Choice"];
ink_runtime_Choice.create = function(choice) {
	var me = new ink_runtime_Choice();
	me.choicePoint = choice;
	return me;
};
ink_runtime_Choice.__super__ = ink_runtime_RObject;
ink_runtime_Choice.prototype = $extend(ink_runtime_RObject.prototype,{
	get_pathStringOnChoice: function() {
		return this.choicePoint.get_pathStringOnChoice();
	}
	,__class__: ink_runtime_Choice
	,__properties__: $extend(ink_runtime_RObject.prototype.__properties__,{get_pathStringOnChoice:"get_pathStringOnChoice"})
});
var ink_runtime_ChoicePoint = function() {
	ink_runtime_RObject.call(this);
	this.onceOnly = true;
};
ink_runtime_ChoicePoint.__name__ = ["ink","runtime","ChoicePoint"];
ink_runtime_ChoicePoint.createOnceOnly = function(onceOnly) {
	var me = new ink_runtime_ChoicePoint();
	me.onceOnly = onceOnly;
	return me;
};
ink_runtime_ChoicePoint.__super__ = ink_runtime_RObject;
ink_runtime_ChoicePoint.prototype = $extend(ink_runtime_RObject.prototype,{
	get_choiceTarget: function() {
		return ink_runtime_LibUtil.asNoInline(this.ResolvePath(this.pathOnChoice),ink_runtime_Container);
	}
	,get_pathStringOnChoice: function() {
		return this.CompactPathString(this.pathOnChoice);
	}
	,set_pathStringOnChoice: function(value) {
		this.pathOnChoice = ink_runtime_Path.createFromString(value);
		return value;
	}
	,get_flags: function() {
		var flags = 0;
		if(this.hasCondition) {
			flags = 1;
		}
		if(this.hasStartContent) {
			flags |= 2;
		}
		if(this.hasChoiceOnlyContent) {
			flags |= 4;
		}
		if(this.isInvisibleDefault) {
			flags |= 8;
		}
		if(this.onceOnly) {
			flags |= 16;
		}
		return flags;
	}
	,set_flags: function(value) {
		var flags = 0;
		flags = 0 | ((this.hasCondition = (value & 1) > 0)?1:0);
		flags |= (this.hasStartContent = (value & 2) > 0)?2:0;
		flags |= (this.hasChoiceOnlyContent = (value & 4) > 0)?4:0;
		flags |= (this.isInvisibleDefault = (value & 8) > 0)?8:0;
		flags |= (this.onceOnly = (value & 16) > 0)?16:0;
		return flags;
	}
	,toString: function() {
		var targetLineNum = this.DebugLineNumberOfPath(this.pathOnChoice);
		var targetString = this.pathOnChoice.toString();
		if(targetLineNum != null) {
			targetString = " line " + Std.string(targetLineNum);
		}
		return "Choice: -> " + targetString;
	}
	,__class__: ink_runtime_ChoicePoint
	,__properties__: $extend(ink_runtime_RObject.prototype.__properties__,{set_flags:"set_flags",get_flags:"get_flags",set_pathStringOnChoice:"set_pathStringOnChoice",get_pathStringOnChoice:"get_pathStringOnChoice",get_choiceTarget:"get_choiceTarget"})
});
var ink_runtime_Cloner = function() {
	this.stringMapCloner = new ink_runtime_MapCloner(this,haxe_ds_StringMap);
	this.intMapCloner = new ink_runtime_MapCloner(this,haxe_ds_IntMap);
	this.classHandles = new haxe_ds_StringMap();
	var _this = this.classHandles;
	var value = $bind(this,this.returnString);
	if(__map_reserved.String != null) {
		_this.setReserved("String",value);
	} else {
		_this.h["String"] = value;
	}
	var _this1 = this.classHandles;
	var value1 = $bind(this,this.cloneArray);
	if(__map_reserved.Array != null) {
		_this1.setReserved("Array",value1);
	} else {
		_this1.h["Array"] = value1;
	}
	var _this2 = this.classHandles;
	var value2 = ($_=this.stringMapCloner,$bind($_,$_.clone));
	if(__map_reserved["haxe.ds.StringMap"] != null) {
		_this2.setReserved("haxe.ds.StringMap",value2);
	} else {
		_this2.h["haxe.ds.StringMap"] = value2;
	}
	var _this3 = this.classHandles;
	var value3 = ($_=this.intMapCloner,$bind($_,$_.clone));
	if(__map_reserved["haxe.ds.IntMap"] != null) {
		_this3.setReserved("haxe.ds.IntMap",value3);
	} else {
		_this3.h["haxe.ds.IntMap"] = value3;
	}
};
ink_runtime_Cloner.__name__ = ["ink","runtime","Cloner"];
ink_runtime_Cloner.prototype = {
	returnString: function(v) {
		return v;
	}
	,clone: function(v) {
		this.cache = new haxe_ds_ObjectMap();
		var outcome = this._clone(v);
		this.cache = null;
		return outcome;
	}
	,_clone: function(v) {
		if(Type.getClassName(v) != null) {
			return v;
		}
		var _g = Type["typeof"](v);
		switch(_g[1]) {
		case 0:
			return null;
		case 1:
			return v;
		case 2:
			return v;
		case 3:
			return v;
		case 4:
			return this.handleAnonymous(v);
		case 5:
			return null;
		case 6:
			var c = _g[2];
			if(this.cache.h.__keys__[v.__id__] == null) {
				this.cache.set(v,this.handleClass(c,v));
			}
			return this.cache.h[v.__id__];
		case 7:
			return v;
		case 8:
			return null;
		}
	}
	,handleAnonymous: function(v) {
		var properties = Reflect.fields(v);
		var anonymous = { };
		var _g1 = 0;
		var _g = properties.length;
		while(_g1 < _g) {
			var property = properties[_g1++];
			var tmp;
			var tmp1;
			if(v == null) {
				tmp1 = null;
			} else {
				var tmp2;
				if(v.__properties__) {
					tmp = v.__properties__["get_" + property];
					tmp2 = tmp;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = v[tmp]();
				} else {
					tmp1 = v[property];
				}
			}
			anonymous[property] = this._clone(tmp1);
		}
		return anonymous;
	}
	,handleClass: function(c,inValue) {
		var key = Type.getClassName(c);
		var _this = this.classHandles;
		var handle = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		if(handle == null) {
			handle = $bind(this,this.cloneClass);
		}
		return handle(inValue);
	}
	,cloneArray: function(inValue) {
		var array = inValue.slice();
		var _g1 = 0;
		var _g = array.length;
		while(_g1 < _g) {
			var i = _g1++;
			array[i] = this._clone(array[i]);
		}
		return array;
	}
	,cloneClass: function(inValue) {
		var outValue = Type.createEmptyInstance(inValue == null?null:js_Boot.getClass(inValue));
		var fields = Reflect.fields(inValue);
		var _g1 = 0;
		var _g = fields.length;
		while(_g1 < _g) {
			var field = fields[_g1++];
			var tmp;
			var tmp1;
			if(inValue == null) {
				tmp1 = null;
			} else {
				var tmp2;
				if(inValue.__properties__) {
					tmp = inValue.__properties__["get_" + field];
					tmp2 = tmp;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = inValue[tmp]();
				} else {
					tmp1 = inValue[field];
				}
			}
			outValue[field] = this._clone(tmp1);
		}
		return outValue;
	}
	,__class__: ink_runtime_Cloner
};
var ink_runtime_CountFlags = function() { };
ink_runtime_CountFlags.__name__ = ["ink","runtime","CountFlags"];
var ink_runtime_INamedContent = function() { };
ink_runtime_INamedContent.__name__ = ["ink","runtime","INamedContent"];
ink_runtime_INamedContent.prototype = {
	__class__: ink_runtime_INamedContent
	,__properties__: {get_hasValidName:"get_hasValidName"}
};
var ink_runtime_Container = function() {
	ink_runtime_RObject.call(this);
	this._content = [];
	this.namedContent = new haxe_ds_StringMap();
};
ink_runtime_Container.__name__ = ["ink","runtime","Container"];
ink_runtime_Container.__interfaces__ = [ink_runtime_INamedContent];
ink_runtime_Container.__super__ = ink_runtime_RObject;
ink_runtime_Container.prototype = $extend(ink_runtime_RObject.prototype,{
	get_content: function() {
		return this._content;
	}
	,set_content: function(value) {
		this.AddContentList(value);
		return this._content;
	}
	,get_namedOnlyContent: function() {
		var namedOnlyContent = new haxe_ds_StringMap();
		var tmp = this.namedContent.keys();
		while(tmp.hasNext()) {
			var k = tmp.next();
			var _this = this.namedContent;
			var value = __map_reserved[k] != null?_this.getReserved(k):_this.h[k];
			if(__map_reserved[k] != null) {
				namedOnlyContent.setReserved(k,value);
			} else {
				namedOnlyContent.h[k] = value;
			}
		}
		var _g1 = 0;
		var _g = this._content.length;
		while(_g1 < _g) {
			var c = this._content[_g1++];
			var named = js_Boot.__instanceof(c,ink_runtime_INamedContent)?c:null;
			if(named != null && named.get_hasValidName()) {
				namedOnlyContent.remove(named.name);
			}
		}
		if(!new haxe_ds__$StringMap_StringMapIterator(namedOnlyContent,namedOnlyContent.arrayKeys()).hasNext()) {
			namedOnlyContent = null;
		}
		return namedOnlyContent;
	}
	,set_namedOnlyContent: function(value) {
		var existingNamedOnly = this.get_namedOnlyContent();
		if(existingNamedOnly != null) {
			var tmp = existingNamedOnly.keys();
			while(tmp.hasNext()) this.namedContent.remove(tmp.next());
		}
		if(value == null) {
			return existingNamedOnly;
		}
		var tmp1 = value.keys();
		while(tmp1.hasNext()) {
			var k = tmp1.next();
			var obj = __map_reserved[k] != null?value.getReserved(k):value.h[k];
			var named = js_Boot.__instanceof(obj,ink_runtime_INamedContent)?obj:null;
			if(named != null) {
				this.AddToNamedContentOnly(named);
			}
		}
		return value;
	}
	,get_countFlags: function() {
		var flags = 0;
		if(this.visitsShouldBeCounted) {
			flags = 1;
		}
		if(this.turnIndexShouldBeCounted) {
			flags |= 2;
		}
		if(this.countingAtStartOnly) {
			flags |= 4;
		}
		if(flags == 4) {
			flags = 0;
		}
		return flags;
	}
	,set_countFlags: function(value) {
		if((value & 1) > 0) {
			this.visitsShouldBeCounted = true;
		}
		if((value & 2) > 0) {
			this.turnIndexShouldBeCounted = true;
		}
		if((value & 4) > 0) {
			this.countingAtStartOnly = true;
		}
		return value;
	}
	,get_hasValidName: function() {
		if(this.name != null) {
			return this.name.length > 0;
		} else {
			return false;
		}
	}
	,AddToNamedContentOnly: function(namedContentObj) {
		if(!js_Boot.__instanceof(namedContentObj,ink_runtime_RObject)) {
			throw new js__$Boot_HaxeError("Can only add Runtime.Objects to a Runtime.Container");
		}
		namedContentObj.parent = this;
		var _this = this.namedContent;
		var key = namedContentObj.name;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,namedContentObj);
		} else {
			_this.h[key] = namedContentObj;
		}
	}
	,AddContent: function(contentObj) {
		this._content.push(contentObj);
		if(contentObj.parent != null) {
			throw new js__$Boot_HaxeError(new ink_runtime_SystemException("content is already in " + Std.string(contentObj.parent)));
		}
		contentObj.parent = this;
		this.TryAddNamedContent(contentObj);
	}
	,AddContentList: function(contentList) {
		var _g = 0;
		while(_g < contentList.length) {
			var c = contentList[_g];
			++_g;
			this.AddContent(c);
		}
	}
	,InsertContent: function(contentObj,index) {
		this._content.splice(index,0,contentObj);
		if(contentObj.parent != null) {
			throw new js__$Boot_HaxeError(new ink_runtime_SystemException("content is already in " + Std.string(contentObj.parent)));
		}
		contentObj.parent = this;
		this.TryAddNamedContent(contentObj);
	}
	,TryAddNamedContent: function(contentObj) {
		var namedContentObj = js_Boot.__instanceof(contentObj,ink_runtime_INamedContent)?contentObj:null;
		if(namedContentObj != null && namedContentObj.get_hasValidName()) {
			this.AddToNamedContentOnly(namedContentObj);
		}
	}
	,AddContentsOfContainer: function(otherContainer) {
		ink_runtime_LibUtil.addRangeForArray(this._content,otherContainer._content);
		var _g = 0;
		var _g1 = otherContainer._content;
		while(_g < _g1.length) {
			var obj = _g1[_g];
			++_g;
			obj.parent = this;
			this.TryAddNamedContent(obj);
		}
	}
	,ContentWithPathComponent: function(component) {
		if(component.get_isIndex()) {
			if(component.index >= 0 && component.index < this._content.length) {
				return this._content[component.index];
			} else {
				return null;
			}
		} else if(component.get_isParent()) {
			return this.parent;
		} else {
			var foundContent = null;
			var map = this.namedContent;
			var prop = component.name;
			foundContent = __map_reserved[prop] != null?map.getReserved(prop):map.h[prop];
			if(foundContent != null) {
				return foundContent;
			} else {
				throw new js__$Boot_HaxeError(new ink_runtime_StoryException("Content '" + component.name + "' not found at path: '" + Std.string(this.get_path()) + "'"));
			}
		}
	}
	,ContentAtPath: function(path,partialPathLength) {
		if(partialPathLength == null) {
			partialPathLength = -1;
		}
		if(partialPathLength == -1) {
			partialPathLength = path.components.length;
		}
		var currentContainer = this;
		var currentObj = this;
		var _g1 = 0;
		var _g = partialPathLength;
		while(_g1 < _g) {
			var comp = path.components[_g1++];
			if(currentContainer == null) {
				throw new js__$Boot_HaxeError(new ink_runtime_SystemException("Path continued, but previous object wasn't a container: " + Std.string(currentObj)));
			}
			currentObj = currentContainer.ContentWithPathComponent(comp);
			currentContainer = js_Boot.__instanceof(currentObj,ink_runtime_Container)?currentObj:null;
		}
		return currentObj;
	}
	,BuildStringOfHierarchy: function(sb,indentation,pointedObj) {
		var appendIndentation = function() {
			var _g1 = 0;
			var _g = 4 * indentation;
			while(_g1 < _g) {
				++_g1;
				sb.b += " ";
			}
		};
		appendIndentation();
		sb.b += "[";
		if(this.get_hasValidName()) {
			sb.b += Std.string(" (" + this.name + ")");
		}
		if(this == pointedObj) {
			sb.b += "  <---";
		}
		sb.b += "\n";
		++indentation;
		var _g11 = 0;
		var _g2 = this._content.length;
		while(_g11 < _g2) {
			var i = _g11++;
			var obj = this._content[i];
			if(js_Boot.__instanceof(obj,ink_runtime_Container)) {
				obj.BuildStringOfHierarchy(sb,indentation,pointedObj);
			} else {
				appendIndentation();
				if(js_Boot.__instanceof(obj,ink_runtime_StringValue)) {
					sb.b += "\"";
					sb.b += Std.string(StringTools.replace(Std.string(obj),"\n","\\n"));
					sb.b += "\"";
				} else {
					sb.b += Std.string(Std.string(obj));
				}
			}
			if(i != this._content.length - 1) {
				sb.b += ",";
			}
			if(!js_Boot.__instanceof(obj,ink_runtime_Container) && obj == pointedObj) {
				sb.b += "  <---";
			}
			sb.b += "\n";
		}
		var onlyNamed = new haxe_ds_StringMap();
		var tmp = this.namedContent.keys();
		while(tmp.hasNext()) {
			var k = tmp.next();
			var _this = this.namedContent;
			if(this._content.indexOf(__map_reserved[k] != null?_this.getReserved(k):_this.h[k]) >= 0) {
				continue;
			} else {
				var _this1 = this.namedContent;
				var value = __map_reserved[k] != null?_this1.getReserved(k):_this1.h[k];
				if(__map_reserved[k] != null) {
					onlyNamed.setReserved(k,value);
				} else {
					onlyNamed.h[k] = value;
				}
			}
		}
		if(new haxe_ds__$StringMap_StringMapIterator(onlyNamed,onlyNamed.arrayKeys()).hasNext()) {
			appendIndentation();
			sb.b += Std.string("-- named: --" + "\n");
			var tmp1 = onlyNamed.keys();
			while(tmp1.hasNext()) {
				var k1 = tmp1.next();
				var objV = __map_reserved[k1] != null?onlyNamed.getReserved(k1):onlyNamed.h[k1];
				if(!js_Boot.__instanceof(objV,ink_runtime_Container)) {
					throw new js__$Boot_HaxeError("Can only print out named Containers");
				}
				objV.BuildStringOfHierarchy(sb,indentation,pointedObj);
				sb.b += "\n";
			}
		}
		--indentation;
		appendIndentation();
		sb.b += "]";
	}
	,BuildStringOfHierarchyVirtual: function() {
		var sb = new StringBuf();
		this.BuildStringOfHierarchy(sb,0,null);
		return sb.b;
	}
	,__class__: ink_runtime_Container
	,__properties__: $extend(ink_runtime_RObject.prototype.__properties__,{get_hasValidName:"get_hasValidName",set_countFlags:"set_countFlags",get_countFlags:"get_countFlags",set_namedOnlyContent:"set_namedOnlyContent",get_namedOnlyContent:"get_namedOnlyContent",set_content:"set_content",get_content:"get_content"})
});
var ink_runtime_ControlCommand = function() {
	ink_runtime_RObject.call(this);
	this.commandType = -1;
};
ink_runtime_ControlCommand.__name__ = ["ink","runtime","ControlCommand"];
ink_runtime_ControlCommand.createFromCommandType = function(commandType) {
	var me = new ink_runtime_ControlCommand();
	me.commandType = commandType;
	return me;
};
ink_runtime_ControlCommand.EvalStart = function() {
	return ink_runtime_ControlCommand.createFromCommandType(0);
};
ink_runtime_ControlCommand.EvalOutput = function() {
	return ink_runtime_ControlCommand.createFromCommandType(1);
};
ink_runtime_ControlCommand.EvalEnd = function() {
	return ink_runtime_ControlCommand.createFromCommandType(2);
};
ink_runtime_ControlCommand.Duplicate = function() {
	return ink_runtime_ControlCommand.createFromCommandType(3);
};
ink_runtime_ControlCommand.PopEvaluatedValue = function() {
	return ink_runtime_ControlCommand.createFromCommandType(4);
};
ink_runtime_ControlCommand.PopFunction = function() {
	return ink_runtime_ControlCommand.createFromCommandType(5);
};
ink_runtime_ControlCommand.PopTunnel = function() {
	return ink_runtime_ControlCommand.createFromCommandType(6);
};
ink_runtime_ControlCommand.BeginString = function() {
	return ink_runtime_ControlCommand.createFromCommandType(7);
};
ink_runtime_ControlCommand.EndString = function() {
	return ink_runtime_ControlCommand.createFromCommandType(8);
};
ink_runtime_ControlCommand.NoOp = function() {
	return ink_runtime_ControlCommand.createFromCommandType(9);
};
ink_runtime_ControlCommand.ChoiceCount = function() {
	return ink_runtime_ControlCommand.createFromCommandType(10);
};
ink_runtime_ControlCommand.TurnsSince = function() {
	return ink_runtime_ControlCommand.createFromCommandType(11);
};
ink_runtime_ControlCommand.VisitIndex = function() {
	return ink_runtime_ControlCommand.createFromCommandType(12);
};
ink_runtime_ControlCommand.SequenceShuffleIndex = function() {
	return ink_runtime_ControlCommand.createFromCommandType(13);
};
ink_runtime_ControlCommand.StartThread = function() {
	return ink_runtime_ControlCommand.createFromCommandType(14);
};
ink_runtime_ControlCommand.Done = function() {
	return ink_runtime_ControlCommand.createFromCommandType(15);
};
ink_runtime_ControlCommand.End = function() {
	return ink_runtime_ControlCommand.createFromCommandType(16);
};
ink_runtime_ControlCommand.__super__ = ink_runtime_RObject;
ink_runtime_ControlCommand.prototype = $extend(ink_runtime_RObject.prototype,{
	Copy: function() {
		return ink_runtime_ControlCommand.createFromCommandType(this.commandType);
	}
	,ToString: function() {
		return Std.string(this.commandType);
	}
	,toString: function() {
		return Std.string(this.commandType);
	}
	,__class__: ink_runtime_ControlCommand
});
var ink_runtime_DebugMetadata = function() {
	this.sourceName = null;
	this.fileName = null;
	this.endLineNumber = 0;
	this.startLineNumber = 0;
};
ink_runtime_DebugMetadata.__name__ = ["ink","runtime","DebugMetadata"];
ink_runtime_DebugMetadata.prototype = {
	toString: function() {
		if(this.fileName != null) {
			return "line " + this.startLineNumber + " of " + this.fileName;
		} else {
			return "line " + this.startLineNumber;
		}
	}
	,__class__: ink_runtime_DebugMetadata
};
var ink_runtime_Divert = function() {
	ink_runtime_RObject.call(this);
	this.pushesToStack = false;
};
ink_runtime_Divert.__name__ = ["ink","runtime","Divert"];
ink_runtime_Divert.createFromPushType = function(stackPushType) {
	var me = new ink_runtime_Divert();
	me.pushesToStack = true;
	me.stackPushType = stackPushType;
	return me;
};
ink_runtime_Divert.__super__ = ink_runtime_RObject;
ink_runtime_Divert.prototype = $extend(ink_runtime_RObject.prototype,{
	get_targetPath: function() {
		if(this._targetPath != null && this._targetPath.isRelative) {
			var targetObj = this.get_targetContent();
			if(targetObj != null) {
				this._targetPath = targetObj.get_path();
			}
		}
		return this._targetPath;
	}
	,set_targetPath: function(value) {
		this._targetPath = value;
		this._targetContent = null;
		return value;
	}
	,get_targetContent: function() {
		if(this._targetContent == null) {
			this._targetContent = this.ResolvePath(this._targetPath);
		}
		return this._targetContent;
	}
	,get_targetPathString: function() {
		var result;
		if(this.get_targetPath() == null) {
			return null;
		}
		result = this.CompactPathString(this.get_targetPath());
		return result;
	}
	,set_targetPathString: function(value) {
		if(value == null) {
			this.set_targetPath(null);
		} else {
			this.set_targetPath(ink_runtime_Path.createFromString(value));
		}
		return value;
	}
	,get_hasVariableTarget: function() {
		return this.variableDivertName != null;
	}
	,Equals: function(obj) {
		var otherDivert = js_Boot.__instanceof(obj,ink_runtime_Divert)?obj:null;
		if(otherDivert != null) {
			if(this.get_hasVariableTarget() == otherDivert.get_hasVariableTarget()) {
				if(this.get_hasVariableTarget()) {
					return this.variableDivertName == otherDivert.variableDivertName;
				} else {
					return this.get_targetPath().Equals(otherDivert.get_targetPath());
				}
			}
		}
		return false;
	}
	,toString: function() {
		if(this.get_hasVariableTarget()) {
			return "Divert(variable: " + this.variableDivertName + ")";
		} else if(this.get_targetPath() == null) {
			return "Divert(null)";
		} else {
			var sb_b = "";
			var targetStr = this.get_targetPath().toString();
			var targetLineNum = this.DebugLineNumberOfPath(this.get_targetPath());
			if(targetLineNum != null) {
				targetStr = "line " + Std.string(targetLineNum);
			}
			sb_b = "Divert";
			if(this.pushesToStack) {
				if(this.stackPushType == 1) {
					sb_b = "Divert" + " function";
				} else {
					sb_b = "Divert" + " tunnel";
				}
			}
			sb_b += " (";
			sb_b += targetStr == null?"null":"" + targetStr;
			sb_b += ")";
			return sb_b;
		}
	}
	,__class__: ink_runtime_Divert
	,__properties__: $extend(ink_runtime_RObject.prototype.__properties__,{get_hasVariableTarget:"get_hasVariableTarget",set_targetPathString:"set_targetPathString",get_targetPathString:"get_targetPathString",get_targetContent:"get_targetContent",set_targetPath:"set_targetPath",get_targetPath:"get_targetPath"})
});
var ink_runtime_GlueType = { __ename__ : true, __constructs__ : ["Bidirectional","Left","Right"] };
ink_runtime_GlueType.Bidirectional = ["Bidirectional",0];
ink_runtime_GlueType.Bidirectional.toString = $estr;
ink_runtime_GlueType.Bidirectional.__enum__ = ink_runtime_GlueType;
ink_runtime_GlueType.Left = ["Left",1];
ink_runtime_GlueType.Left.toString = $estr;
ink_runtime_GlueType.Left.__enum__ = ink_runtime_GlueType;
ink_runtime_GlueType.Right = ["Right",2];
ink_runtime_GlueType.Right.toString = $estr;
ink_runtime_GlueType.Right.__enum__ = ink_runtime_GlueType;
var ink_runtime_Glue = function(type) {
	ink_runtime_RObject.call(this);
	this.glueType = type;
};
ink_runtime_Glue.__name__ = ["ink","runtime","Glue"];
ink_runtime_Glue.__super__ = ink_runtime_RObject;
ink_runtime_Glue.prototype = $extend(ink_runtime_RObject.prototype,{
	get_isLeft: function() {
		return this.glueType == ink_runtime_GlueType.Left;
	}
	,get_isBi: function() {
		return this.glueType == ink_runtime_GlueType.Bidirectional;
	}
	,get_isRight: function() {
		return this.glueType == ink_runtime_GlueType.Right;
	}
	,toString: function() {
		switch(this.glueType[1]) {
		case 0:
			return "BidirGlue";
		case 1:
			return "LeftGlue";
		case 2:
			return "RightGlue";
		}
	}
	,__class__: ink_runtime_Glue
	,__properties__: $extend(ink_runtime_RObject.prototype.__properties__,{get_isRight:"get_isRight",get_isBi:"get_isBi",get_isLeft:"get_isLeft"})
});
var ink_runtime_HashSet = function() {
	this.map = new haxe_ds_ObjectMap();
};
ink_runtime_HashSet.__name__ = ["ink","runtime","HashSet"];
ink_runtime_HashSet.prototype = {
	add: function(key) {
		this.map.set(key,true);
	}
	,keys: function() {
		return this.map.keys();
	}
	,contains: function(key) {
		return this.map.h.__keys__[key.__id__] != null;
	}
	,__class__: ink_runtime_HashSet
};
var ink_runtime_HashSetString = $hx_exports["ink"]["runtime"]["HashSetString"] = function() {
	this.map = new haxe_ds_StringMap();
};
ink_runtime_HashSetString.__name__ = ["ink","runtime","HashSetString"];
ink_runtime_HashSetString.prototype = {
	add: function(key) {
		var _this = this.map;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,true);
		} else {
			_this.h[key] = true;
		}
	}
	,keys: function() {
		return this.map.keys();
	}
	,contains: function(key) {
		var _this = this.map;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,clone: function() {
		var c = new ink_runtime_HashSetString();
		var tmp = this.keys();
		while(tmp.hasNext()) c.add(tmp.next());
		return c;
	}
	,__class__: ink_runtime_HashSetString
};
var ink_runtime_IEquatable = function() { };
ink_runtime_IEquatable.__name__ = ["ink","runtime","IEquatable"];
ink_runtime_IEquatable.prototype = {
	__class__: ink_runtime_IEquatable
};
var ink_runtime_IProxy = function() { };
ink_runtime_IProxy.__name__ = ["ink","runtime","IProxy"];
ink_runtime_IProxy.prototype = {
	__class__: ink_runtime_IProxy
};
var ink_runtime_SystemException = function(msg) {
	this.msg = msg;
};
ink_runtime_SystemException.__name__ = ["ink","runtime","SystemException"];
ink_runtime_SystemException.prototype = {
	toString: function() {
		return Type.getClassName(js_Boot.getClass(this)) + ":: " + this.msg;
	}
	,__class__: ink_runtime_SystemException
};
var ink_runtime_Json = function() { };
ink_runtime_Json.__name__ = ["ink","runtime","Json"];
ink_runtime_Json.ListToJArray = function(serialisables) {
	var jArray = [];
	var _g_head = serialisables.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		jArray.push(ink_runtime_Json.RuntimeObjectToJToken(val));
	}
	return jArray;
};
ink_runtime_Json.ArrayToJArray = function(serialisables) {
	var jArray = [];
	var _g = 0;
	while(_g < serialisables.length) {
		var s = serialisables[_g];
		++_g;
		jArray.push(ink_runtime_Json.RuntimeObjectToJToken(s));
	}
	return jArray;
};
ink_runtime_Json.JArrayToRuntimeObjList = function(jArray,skipLast) {
	if(skipLast == null) {
		skipLast = false;
	}
	var count = jArray.length;
	if(skipLast) {
		--count;
	}
	var list = new List();
	var _g1 = 0;
	var _g = count;
	while(_g1 < _g) {
		var obj = ink_runtime_Json.JTokenToRuntimeObject(jArray[_g1++]);
		list.add(js_Boot.__instanceof(obj,ink_runtime_RObject)?obj:null);
	}
	return list;
};
ink_runtime_Json.JArrayToRuntimeObjArray = function(jArray,skipLast) {
	if(skipLast == null) {
		skipLast = false;
	}
	var count = jArray.length;
	if(skipLast) {
		--count;
	}
	var list = [];
	var _g1 = 0;
	var _g = count;
	while(_g1 < _g) {
		var obj = ink_runtime_Json.JTokenToRuntimeObject(jArray[_g1++]);
		list.push(js_Boot.__instanceof(obj,ink_runtime_RObject)?obj:null);
	}
	return list;
};
ink_runtime_Json.DictionaryRuntimeObjsToJObject = function(dictionary) {
	var jsonObj = { };
	var tmp = dictionary.keys();
	while(tmp.hasNext()) {
		var k = tmp.next();
		var obj = __map_reserved[k] != null?dictionary.getReserved(k):dictionary.h[k];
		var runtimeObj = js_Boot.__instanceof(obj,ink_runtime_RObject)?obj:null;
		if(runtimeObj != null) {
			jsonObj[k] = ink_runtime_Json.RuntimeObjectToJToken(runtimeObj);
		}
	}
	return jsonObj;
};
ink_runtime_Json.JObjectToDictionaryRuntimeObjs = function(jObject) {
	var dict = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = Reflect.fields(jObject);
	while(_g < _g1.length) {
		var k = _g1[_g];
		++_g;
		var value = ink_runtime_Json.JTokenToRuntimeObject(Reflect.field(jObject,k));
		if(__map_reserved[k] != null) {
			dict.setReserved(k,value);
		} else {
			dict.h[k] = value;
		}
	}
	return dict;
};
ink_runtime_Json.JObjectToIntDictionary = function(jObject) {
	var dict = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = Reflect.fields(jObject);
	while(_g < _g1.length) {
		var k = _g1[_g];
		++_g;
		var value = Reflect.field(jObject,k) | 0;
		if(__map_reserved[k] != null) {
			dict.setReserved(k,value);
		} else {
			dict.h[k] = value;
		}
	}
	return dict;
};
ink_runtime_Json.IntDictionaryToJObject = function(dict) {
	var jObj = { };
	var tmp = dict.keys();
	while(tmp.hasNext()) {
		var k = tmp.next();
		jObj[k] = __map_reserved[k] != null?dict.getReserved(k):dict.h[k];
	}
	return jObj;
};
ink_runtime_Json.JTokenToRuntimeObject = function(token) {
	if(typeof(token) == "number" && ((token | 0) === token) || typeof(token) == "number") {
		return ink_runtime_Value.Create(token);
	}
	if(typeof(token) == "string") {
		var str = Std.string(token);
		var firstChar = str.charAt(0);
		if(firstChar == "^") {
			return new ink_runtime_StringValue(str.substring(1));
		} else if(firstChar == "\n" && str.length == 1 || token == "\n") {
			return new ink_runtime_StringValue("\n");
		}
		if(str == "<>") {
			return new ink_runtime_Glue(ink_runtime_GlueType.Bidirectional);
		} else if(str == "G<") {
			return new ink_runtime_Glue(ink_runtime_GlueType.Left);
		} else if(str == "G>") {
			return new ink_runtime_Glue(ink_runtime_GlueType.Right);
		}
		var _g1 = 0;
		var _g = ink_runtime_Json._controlCommandNames.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(str == ink_runtime_Json._controlCommandNames[i]) {
				var cmdType = i;
				return ink_runtime_ControlCommand.createFromCommandType(i);
			}
		}
		if(ink_runtime_NativeFunctionCall.CallExistsWithName(str)) {
			return ink_runtime_NativeFunctionCall.CallWithName(str);
		}
		if(str == "->->") {
			return ink_runtime_ControlCommand.PopTunnel();
		} else if(str == "~ret") {
			return ink_runtime_ControlCommand.PopFunction();
		}
		if(str == "void") {
			return new ink_runtime_VoidObj();
		}
		console.log("Failed to resolve String type!");
	}
	if((token instanceof Array) && token.__enum__ == null) {
		return ink_runtime_Json.JArrayToContainer(token);
	}
	if(Type["typeof"](token) == ValueType.TObject) {
		var obj = token;
		var propValue = Reflect.field(obj,"^->");
		if(propValue != null) {
			return new ink_runtime_DivertTargetValue(ink_runtime_Path.createFromString(Std.string(propValue)));
		}
		propValue = Reflect.field(obj,"^var");
		if(propValue != null) {
			var varPtr = new ink_runtime_VariablePointerValue(Std.string(propValue));
			propValue = Reflect.field(obj,"ci");
			if(propValue != null) {
				varPtr.contextIndex = propValue | 0;
			}
			return varPtr;
		}
		var isDivert = false;
		var pushesToStack = false;
		var divPushType = 1;
		var external = false;
		propValue = Reflect.field(obj,"->");
		if(propValue != null) {
			isDivert = true;
		} else {
			propValue = Reflect.field(obj,"f()");
			if(propValue != null) {
				isDivert = true;
				pushesToStack = true;
				divPushType = 1;
			} else {
				propValue = Reflect.field(obj,"->t->");
				if(propValue != null) {
					isDivert = true;
					pushesToStack = true;
					divPushType = 0;
				} else {
					propValue = Reflect.field(obj,"x()");
					if(propValue != null) {
						isDivert = true;
						external = true;
						pushesToStack = false;
						divPushType = 1;
					}
				}
			}
		}
		if(isDivert) {
			var divert = new ink_runtime_Divert();
			divert.pushesToStack = pushesToStack;
			divert.stackPushType = divPushType;
			divert.isExternal = external;
			var target = Std.string(propValue);
			propValue = Reflect.field(obj,"var");
			if(propValue != null) {
				divert.variableDivertName = target;
			} else {
				divert.set_targetPathString(target);
			}
			propValue = Reflect.field(obj,"c");
			divert.isConditional = propValue != null;
			if(external) {
				propValue = Reflect.field(obj,"exArgs");
				if(propValue != null) {
					divert.externalArgs = propValue | 0;
				}
			}
			return divert;
		}
		propValue = Reflect.field(obj,"*");
		if(propValue != null) {
			var choice = new ink_runtime_ChoicePoint();
			choice.set_pathStringOnChoice(Std.string(propValue));
			propValue = Reflect.field(obj,"flg");
			if(propValue != null) {
				choice.set_flags(propValue | 0);
			}
			return choice;
		}
		propValue = Reflect.field(obj,"VAR?");
		if(propValue != null) {
			return ink_runtime_VariableReference.create(Std.string(propValue));
		} else {
			propValue = Reflect.field(obj,"CNT?");
			if(propValue != null) {
				var readCountVarRef = new ink_runtime_VariableReference();
				readCountVarRef.set_pathStringForCount(Std.string(propValue));
				return readCountVarRef;
			}
		}
		var isVarAss = false;
		var isGlobalVar = false;
		propValue = Reflect.field(obj,"VAR=");
		if(propValue != null) {
			isVarAss = true;
			isGlobalVar = true;
		} else {
			propValue = Reflect.field(obj,"temp=");
			if(propValue != null) {
				isVarAss = true;
				isGlobalVar = false;
			}
		}
		if(isVarAss) {
			var varName = Std.string(propValue);
			propValue = Reflect.field(obj,"re");
			var varAss = new ink_runtime_VariableAssignment(varName,propValue == null);
			varAss.isGlobal = isGlobalVar;
			return varAss;
		}
		if(Reflect.field(obj,"originalChoicePath") != null) {
			return ink_runtime_Json.JObjectToChoice(obj);
		}
		console.log("Failed to resolve TObject type!");
	}
	if(token == null) {
		return null;
	}
	throw new js__$Boot_HaxeError(new ink_runtime_SystemException("Failed to convert token to runtime object: " + Std.string(token) + " :: " + Std.string(Type["typeof"](token))));
};
ink_runtime_Json.RuntimeObjectToJToken = function(obj) {
	var container = js_Boot.__instanceof(obj,ink_runtime_Container)?obj:null;
	if(container != null) {
		return ink_runtime_Json.ContainerToJArray(container);
	}
	var divert = js_Boot.__instanceof(obj,ink_runtime_Divert)?obj:null;
	if(divert != null) {
		var divTypeKey = "->";
		if(divert.isExternal) {
			divTypeKey = "x()";
		} else if(divert.pushesToStack) {
			if(divert.stackPushType == 1) {
				divTypeKey = "f()";
			} else if(divert.stackPushType == 0) {
				divTypeKey = "->t->";
			}
		}
		var targetStr = divert.get_hasVariableTarget()?divert.variableDivertName:divert.get_targetPathString();
		var jObj = { };
		jObj[divTypeKey] = targetStr;
		if(divert.get_hasVariableTarget()) {
			jObj["var"] = true;
		}
		if(divert.isConditional) {
			jObj.c = true;
		}
		if(divert.externalArgs > 0) {
			jObj.exArgs = divert.externalArgs;
		}
		return jObj;
	}
	var choicePoint = js_Boot.__instanceof(obj,ink_runtime_ChoicePoint)?obj:null;
	if(choicePoint != null) {
		var jObj1 = { };
		jObj1["*"] = choicePoint.get_pathStringOnChoice();
		jObj1.flg = choicePoint.get_flags();
		return jObj1;
	}
	var intVal = js_Boot.__instanceof(obj,ink_runtime_IntValue)?obj:null;
	if(intVal != null) {
		return intVal.value;
	}
	var floatVal = js_Boot.__instanceof(obj,ink_runtime_FloatValue)?obj:null;
	if(floatVal != null) {
		return floatVal.value;
	}
	var strVal = js_Boot.__instanceof(obj,ink_runtime_StringValue)?obj:null;
	if(strVal != null) {
		if(strVal.isNewline) {
			return "\n";
		} else {
			return "^" + strVal.value;
		}
	}
	var divTargetVal = js_Boot.__instanceof(obj,ink_runtime_DivertTargetValue)?obj:null;
	if(divTargetVal != null) {
		var divTargetJsonObj = { };
		divTargetJsonObj["^->"] = divTargetVal.value.get_componentsString();
		return divTargetJsonObj;
	}
	var varPtrVal = js_Boot.__instanceof(obj,ink_runtime_VariablePointerValue)?obj:null;
	if(varPtrVal != null) {
		var varPtrJsonObj = { };
		varPtrJsonObj["^var"] = varPtrVal.value;
		varPtrJsonObj.ci = varPtrVal.contextIndex;
		return varPtrJsonObj;
	}
	var glue = js_Boot.__instanceof(obj,ink_runtime_Glue)?obj:null;
	if(glue != null) {
		if(glue.get_isBi()) {
			return "<>";
		} else if(glue.get_isLeft()) {
			return "G<";
		} else {
			return "G>";
		}
	}
	var controlCmd = js_Boot.__instanceof(obj,ink_runtime_ControlCommand)?obj:null;
	if(controlCmd != null) {
		return ink_runtime_Json._controlCommandNames[controlCmd.commandType];
	}
	var nativeFunc = js_Boot.__instanceof(obj,ink_runtime_NativeFunctionCall)?obj:null;
	if(nativeFunc != null) {
		return nativeFunc._name;
	}
	var varRef = js_Boot.__instanceof(obj,ink_runtime_VariableReference)?obj:null;
	if(varRef != null) {
		var jObj2 = { };
		var readCountPath = varRef.get_pathStringForCount();
		if(readCountPath != null) {
			jObj2["CNT?"] = readCountPath;
		} else {
			jObj2["VAR?"] = varRef.name;
		}
		return jObj2;
	}
	var varAss = js_Boot.__instanceof(obj,ink_runtime_VariableAssignment)?obj:null;
	if(varAss != null) {
		var key = varAss.isGlobal?"VAR=":"temp=";
		var jObj3 = { };
		jObj3[key] = varAss.variableName;
		if(!varAss.isNewDeclaration) {
			jObj3.re = true;
		}
		return jObj3;
	}
	if((js_Boot.__instanceof(obj,ink_runtime_VoidObj)?obj:null) != null) {
		return "void";
	}
	var choice = js_Boot.__instanceof(obj,ink_runtime_Choice)?obj:null;
	if(choice != null) {
		return ink_runtime_Json.ChoiceToJObject(choice);
	}
	throw new js__$Boot_HaxeError(new ink_runtime_SystemException("Failed to convert runtime object to Json token: " + Std.string(obj)));
};
ink_runtime_Json.ContainerToJArray = function(container) {
	var serialisables = container._content;
	var jArray = [];
	var _g = 0;
	while(_g < serialisables.length) {
		var s = serialisables[_g];
		++_g;
		jArray.push(ink_runtime_Json.RuntimeObjectToJToken(s));
	}
	var jArray1 = jArray;
	var namedOnlyContent = container.get_namedOnlyContent();
	var countFlags = container.get_countFlags();
	if(namedOnlyContent != null && new haxe_ds__$StringMap_StringMapIterator(namedOnlyContent,namedOnlyContent.arrayKeys()).hasNext() || countFlags > 0 || container.name != null) {
		var terminatingObj;
		if(namedOnlyContent != null) {
			terminatingObj = ink_runtime_Json.DictionaryRuntimeObjsToJObject(namedOnlyContent);
			var _g1 = 0;
			var _g11 = Reflect.fields(terminatingObj);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				var namedContentObj = Reflect.field(terminatingObj,p);
				var obj = Reflect.field(terminatingObj,p);
				var subContainerJArray = (obj instanceof Array) && obj.__enum__ == null?obj:null;
				if(subContainerJArray != null) {
					var attrJObj = subContainerJArray[subContainerJArray.length - 1];
					if(attrJObj != null) {
						Reflect.deleteField(attrJObj,"#n");
						if(Reflect.fields(attrJObj).length == 0) {
							subContainerJArray[subContainerJArray.length - 1] = null;
						}
					}
				}
			}
		} else {
			terminatingObj = { };
		}
		if(countFlags > 0) {
			terminatingObj["#f"] = countFlags;
		}
		if(container.name != null) {
			terminatingObj["#n"] = container.name;
		}
		jArray1.push(terminatingObj);
	} else {
		jArray1.push(null);
	}
	return jArray1;
};
ink_runtime_Json.JArrayToContainer = function(jArray) {
	var container = new ink_runtime_Container();
	container.AddContentList(ink_runtime_Json.JArrayToRuntimeObjArray(jArray,true));
	var terminatingObj = jArray[jArray.length - 1];
	if(terminatingObj != null) {
		var namedOnlyContent = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = Reflect.fields(terminatingObj);
		while(_g < _g1.length) {
			var k = _g1[_g];
			++_g;
			if(k == "#f") {
				container.set_countFlags(Reflect.field(terminatingObj,k) | 0);
			} else if(k == "#n") {
				container.name = Std.string(Reflect.field(terminatingObj,k));
			} else {
				var namedContentItem = ink_runtime_Json.JTokenToRuntimeObject(Reflect.field(terminatingObj,k));
				var namedSubContainer = js_Boot.__instanceof(namedContentItem,ink_runtime_Container)?namedContentItem:null;
				if(namedSubContainer != null) {
					namedSubContainer.name = k;
				}
				if(__map_reserved[k] != null) {
					namedOnlyContent.setReserved(k,namedContentItem);
				} else {
					namedOnlyContent.h[k] = namedContentItem;
				}
			}
		}
		container.set_namedOnlyContent(namedOnlyContent);
	}
	return container;
};
ink_runtime_Json.JObjectToChoice = function(jObj) {
	var choice = new ink_runtime_Choice();
	choice.text = Std.string(Reflect.field(jObj,"text"));
	choice.index = Reflect.field(jObj,"index") | 0;
	choice.originalChoicePath = Std.string(Reflect.field(jObj,"originalChoicePath"));
	choice.originalThreadIndex = Reflect.field(jObj,"originalThreadIndex") | 0;
	return choice;
};
ink_runtime_Json.ChoiceToJObject = function(choice) {
	return { text : choice.text, index : choice.index, originalChoicePath : choice.originalChoicePath, originalThreadIndex : choice.originalThreadIndex};
};
var ink_runtime_LibUtil = function() { };
ink_runtime_LibUtil.__name__ = ["ink","runtime","LibUtil"];
ink_runtime_LibUtil.validInt = function(val) {
	if(val != null) {
		return !isNaN(val);
	} else {
		return false;
	}
};
ink_runtime_LibUtil["as"] = function(obj,type) {
	if(js_Boot.__instanceof(obj,type)) {
		return obj;
	} else {
		return null;
	}
};
ink_runtime_LibUtil.asNoInline = function(obj,type) {
	if(js_Boot.__instanceof(obj,type)) {
		return obj;
	} else {
		return null;
	}
};
ink_runtime_LibUtil.tryParseFloat = function(val) {
	return parseFloat(val);
};
ink_runtime_LibUtil.tryParseInt = function(val) {
	return Std.parseInt(val);
};
ink_runtime_LibUtil.tryGetValue = function(map,prop) {
	return __map_reserved[prop] != null?map.getReserved(prop):map.h[prop];
};
ink_runtime_LibUtil.tryGetValueINamedContent = function(map,prop) {
	return __map_reserved[prop] != null?map.getReserved(prop):map.h[prop];
};
ink_runtime_LibUtil.jTokenToStringMap = function(token) {
	var strMap = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = Reflect.fields(token);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		var value = Reflect.field(token,f);
		if(__map_reserved[f] != null) {
			strMap.setReserved(f,value);
		} else {
			strMap.h[f] = value;
		}
	}
	return strMap;
};
ink_runtime_LibUtil.cloneStrMap = function(map) {
	var cMap = new haxe_ds_StringMap();
	var tmp = map.keys();
	while(tmp.hasNext()) {
		var c = tmp.next();
		var value = __map_reserved[c] != null?map.getReserved(c):map.h[c];
		if(__map_reserved[c] != null) {
			cMap.setReserved(c,value);
		} else {
			cMap.h[c] = value;
		}
	}
	return cMap;
};
ink_runtime_LibUtil.cloneStrIntMap = function(map) {
	var cMap = new haxe_ds_StringMap();
	var tmp = map.keys();
	while(tmp.hasNext()) {
		var c = tmp.next();
		var value = __map_reserved[c] != null?map.getReserved(c):map.h[c];
		if(__map_reserved[c] != null) {
			cMap.setReserved(c,value);
		} else {
			cMap.h[c] = value;
		}
	}
	return cMap;
};
ink_runtime_LibUtil.cloneObjMap = function(map) {
	var cMap = new haxe_ds_ObjectMap();
	var tmp = map.keys();
	while(tmp.hasNext()) {
		var c = tmp.next();
		cMap.set(c,map.h[c.__id__]);
	}
	return cMap;
};
ink_runtime_LibUtil.listIndexOf = function(list,obj) {
	var count = 0;
	var _g_head = list.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		if(val == obj) {
			return count;
		}
		++count;
	}
	return -1;
};
ink_runtime_LibUtil.arrayToList = function(arr) {
	var list = new List();
	var _g = 0;
	while(_g < arr.length) {
		var val = arr[_g];
		++_g;
		list.add(val);
	}
	return list;
};
ink_runtime_LibUtil.getArrayItemAtIndex = function(arr,index) {
	return arr[index];
};
ink_runtime_LibUtil.getListItemAtIndex = function(list,index) {
	if(index < 0 || index >= list.length) {
		return null;
	}
	var iter_head = list.h;
	var _g1 = 0;
	while(_g1 < index) {
		++_g1;
		iter_head = iter_head.next;
	}
	return iter_head.item;
};
ink_runtime_LibUtil.tryGetValueDynamic = function(obj,prop) {
	return Reflect.field(obj,prop);
};
ink_runtime_LibUtil.clearArray = function(arr) {
	arr.length = 0;
};
ink_runtime_LibUtil.arraySequenceEquals = function(arr1,arr2) {
	if(arr1.length != arr2.length) {
		return false;
	}
	var _g1 = 0;
	var _g = arr1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(!arr1[i].Equals(arr2[i])) {
			return false;
		}
	}
	return true;
};
ink_runtime_LibUtil.addRangeForList = function(list,toAdd) {
	var _g_head = toAdd.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		list.add(val);
	}
};
ink_runtime_LibUtil.addRangeForArray = function(list,toAdd) {
	var _g1 = 0;
	var _g = toAdd.length;
	while(_g1 < _g) list.push(toAdd[_g1++]);
};
ink_runtime_LibUtil.findForList = function(list,f) {
	var _g_head = list.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		if(f(val)) {
			return val;
		}
	}
	return null;
};
ink_runtime_LibUtil.minI = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
ink_runtime_LibUtil.maxI = function(a,b) {
	if(a >= b) {
		return a;
	} else {
		return b;
	}
};
ink_runtime_LibUtil.minI_ = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
ink_runtime_LibUtil.maxI_ = function(a,b) {
	if(a >= b) {
		return a;
	} else {
		return b;
	}
};
ink_runtime_LibUtil.removeArrayItemAtIndex = function(arr,index) {
	arr.splice(index,1);
};
var ink_runtime_MapCloner = function(cloner,type) {
	this.cloner = cloner;
	this.type = type;
	this.noArgs = [];
};
ink_runtime_MapCloner.__name__ = ["ink","runtime","MapCloner"];
ink_runtime_MapCloner.prototype = {
	clone: function(inValue) {
		var map = Type.createInstance(this.type,this.noArgs);
		var tmp = inValue.keys();
		while(tmp.hasNext()) {
			var key = tmp.next();
			map.set(key,this.cloner._clone(inValue.get(key)));
		}
		return map;
	}
	,__class__: ink_runtime_MapCloner
};
var ink_runtime_NativeFunctionCall = function() {
	ink_runtime_RObject.call(this);
	ink_runtime_NativeFunctionCall.GenerateNativeFunctionsIfNecessary();
};
ink_runtime_NativeFunctionCall.__name__ = ["ink","runtime","NativeFunctionCall"];
ink_runtime_NativeFunctionCall.CallWithName = function(functionName) {
	return ink_runtime_NativeFunctionCall.createFromName(functionName);
};
ink_runtime_NativeFunctionCall.CallExistsWithName = function(functionName) {
	ink_runtime_NativeFunctionCall.GenerateNativeFunctionsIfNecessary();
	var _this = ink_runtime_NativeFunctionCall._nativeFunctions;
	if(__map_reserved[functionName] != null) {
		return _this.existsReserved(functionName);
	} else {
		return _this.h.hasOwnProperty(functionName);
	}
};
ink_runtime_NativeFunctionCall.createFromName = function(name) {
	var me = new ink_runtime_NativeFunctionCall();
	me.set_name(name);
	return me;
};
ink_runtime_NativeFunctionCall.createFromNameAndNumParams = function(name,numberOfParamters) {
	var me = new ink_runtime_NativeFunctionCall();
	me._isPrototype = true;
	me.set_name(name);
	me.set_numberOfParameters(numberOfParamters);
	return me;
};
ink_runtime_NativeFunctionCall.GenerateNativeFunctionsIfNecessary = function() {
	if(ink_runtime_NativeFunctionCall._nativeFunctions == null) {
		ink_runtime_NativeFunctionCall._nativeFunctions = new haxe_ds_StringMap();
		ink_runtime_NativeFunctionCall.AddIntBinaryOp("+",function(x,y) {
			return x + y;
		});
		ink_runtime_NativeFunctionCall.AddIntBinaryOp("-",function(x1,y1) {
			return x1 - y1;
		});
		ink_runtime_NativeFunctionCall.AddIntBinaryOp("*",function(x2,y2) {
			return x2 * y2;
		});
		ink_runtime_NativeFunctionCall.AddIntBinaryOp("/",function(x3,y3) {
			return x3 / y3 | 0;
		});
		ink_runtime_NativeFunctionCall.AddIntBinaryOp("%",function(x4,y4) {
			return x4 % y4;
		});
		ink_runtime_NativeFunctionCall.AddIntUnaryOp("~",function(x5) {
			return -x5;
		});
		ink_runtime_NativeFunctionCall.AddIntBinaryOp("==",function(x6,y5) {
			if(x6 == y5) {
				return 1;
			} else {
				return 0;
			}
		});
		ink_runtime_NativeFunctionCall.AddIntBinaryOp(">",function(x7,y6) {
			if(x7 > y6) {
				return 1;
			} else {
				return 0;
			}
		});
		ink_runtime_NativeFunctionCall.AddIntBinaryOp("<",function(x8,y7) {
			if(x8 < y7) {
				return 1;
			} else {
				return 0;
			}
		});
		ink_runtime_NativeFunctionCall.AddIntBinaryOp(">=",function(x9,y8) {
			if(x9 >= y8) {
				return 1;
			} else {
				return 0;
			}
		});
		ink_runtime_NativeFunctionCall.AddIntBinaryOp("<=",function(x10,y9) {
			if(x10 <= y9) {
				return 1;
			} else {
				return 0;
			}
		});
		ink_runtime_NativeFunctionCall.AddIntBinaryOp("!=",function(x11,y10) {
			if(x11 != y10) {
				return 1;
			} else {
				return 0;
			}
		});
		ink_runtime_NativeFunctionCall.AddIntUnaryOp("!",function(x12) {
			if(x12 == 0) {
				return 1;
			} else {
				return 0;
			}
		});
		ink_runtime_NativeFunctionCall.AddIntBinaryOp("&&",function(x13,y11) {
			if(x13 != 0 && y11 != 0) {
				return 1;
			} else {
				return 0;
			}
		});
		ink_runtime_NativeFunctionCall.AddIntBinaryOp("||",function(x14,y12) {
			if(x14 != 0 || y12 != 0) {
				return 1;
			} else {
				return 0;
			}
		});
		ink_runtime_NativeFunctionCall.AddIntBinaryOp("MAX",function(x15,y13) {
			if(x15 >= y13) {
				return x15;
			} else {
				return y13;
			}
		});
		ink_runtime_NativeFunctionCall.AddIntBinaryOp("MIN",function(x16,y14) {
			if(x16 < y14) {
				return x16;
			} else {
				return y14;
			}
		});
		ink_runtime_NativeFunctionCall.AddFloatBinaryOp("+",function(x17,y15) {
			return x17 + y15;
		});
		ink_runtime_NativeFunctionCall.AddFloatBinaryOp("-",function(x18,y16) {
			return x18 - y16;
		});
		ink_runtime_NativeFunctionCall.AddFloatBinaryOp("*",function(x19,y17) {
			return x19 * y17;
		});
		ink_runtime_NativeFunctionCall.AddFloatBinaryOp("/",function(x20,y18) {
			return x20 / y18;
		});
		ink_runtime_NativeFunctionCall.AddFloatBinaryOp("%",function(x21,y19) {
			return x21 % y19;
		});
		ink_runtime_NativeFunctionCall.AddFloatUnaryOp("~",function(x22) {
			return -x22;
		});
		ink_runtime_NativeFunctionCall.AddFloatBinaryOp("==",function(x23,y20) {
			if(x23 == y20) {
				return 1;
			} else {
				return 0;
			}
		});
		ink_runtime_NativeFunctionCall.AddFloatBinaryOp(">",function(x24,y21) {
			if(x24 > y21) {
				return 1;
			} else {
				return 0;
			}
		});
		ink_runtime_NativeFunctionCall.AddFloatBinaryOp("<",function(x25,y22) {
			if(x25 < y22) {
				return 1;
			} else {
				return 0;
			}
		});
		ink_runtime_NativeFunctionCall.AddFloatBinaryOp(">=",function(x26,y23) {
			if(x26 >= y23) {
				return 1;
			} else {
				return 0;
			}
		});
		ink_runtime_NativeFunctionCall.AddFloatBinaryOp("<=",function(x27,y24) {
			if(x27 <= y24) {
				return 1;
			} else {
				return 0;
			}
		});
		ink_runtime_NativeFunctionCall.AddFloatBinaryOp("!=",function(x28,y25) {
			if(x28 != y25) {
				return 1;
			} else {
				return 0;
			}
		});
		ink_runtime_NativeFunctionCall.AddFloatUnaryOp("!",function(x29) {
			if(x29 == 0.0) {
				return 1;
			} else {
				return 0;
			}
		});
		ink_runtime_NativeFunctionCall.AddFloatBinaryOp("&&",function(x30,y26) {
			if(x30 != 0.0 && y26 != 0.0) {
				return 1;
			} else {
				return 0;
			}
		});
		ink_runtime_NativeFunctionCall.AddFloatBinaryOp("||",function(x31,y27) {
			if(x31 != 0.0 || y27 != 0.0) {
				return 1;
			} else {
				return 0;
			}
		});
		ink_runtime_NativeFunctionCall.AddFloatBinaryOp("MAX",function(x32,y28) {
			return Math.max(x32,y28);
		});
		ink_runtime_NativeFunctionCall.AddFloatBinaryOp("MIN",function(x33,y29) {
			return Math.min(x33,y29);
		});
		ink_runtime_NativeFunctionCall.AddStringBinaryOpConcat("+",function(x34,y30) {
			return x34 + y30;
		});
		ink_runtime_NativeFunctionCall.AddStringBinaryOp("==",function(x35,y31) {
			if(x35 == y31) {
				return 1;
			} else {
				return 0;
			}
		});
		ink_runtime_NativeFunctionCall.AddOpToNativeFunc("==",2,3,function(d1,d2) {
			if(d1.Equals(d2)) {
				return 1;
			} else {
				return 0;
			}
		});
	}
};
ink_runtime_NativeFunctionCall.AddOpToNativeFunc = function(name,args,valType,op) {
	var nativeFunc = null;
	var _this = ink_runtime_NativeFunctionCall._nativeFunctions;
	nativeFunc = __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
	if(nativeFunc == null) {
		nativeFunc = ink_runtime_NativeFunctionCall.createFromNameAndNumParams(name,args);
		var _this1 = ink_runtime_NativeFunctionCall._nativeFunctions;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,nativeFunc);
		} else {
			_this1.h[name] = nativeFunc;
		}
	}
	nativeFunc.AddOpFuncForType(valType,op);
};
ink_runtime_NativeFunctionCall.AddIntBinaryOp = function(name,op) {
	ink_runtime_NativeFunctionCall.AddOpToNativeFunc(name,2,0,op);
};
ink_runtime_NativeFunctionCall.AddIntUnaryOp = function(name,op) {
	ink_runtime_NativeFunctionCall.AddOpToNativeFunc(name,1,0,op);
};
ink_runtime_NativeFunctionCall.AddFloatBinaryOp = function(name,op) {
	ink_runtime_NativeFunctionCall.AddOpToNativeFunc(name,2,1,op);
};
ink_runtime_NativeFunctionCall.AddStringBinaryOp = function(name,op) {
	ink_runtime_NativeFunctionCall.AddOpToNativeFunc(name,2,2,op);
};
ink_runtime_NativeFunctionCall.AddStringBinaryOpConcat = function(name,op) {
	ink_runtime_NativeFunctionCall.AddOpToNativeFunc(name,2,2,op);
};
ink_runtime_NativeFunctionCall.AddFloatUnaryOp = function(name,op) {
	ink_runtime_NativeFunctionCall.AddOpToNativeFunc(name,1,1,op);
};
ink_runtime_NativeFunctionCall.__super__ = ink_runtime_RObject;
ink_runtime_NativeFunctionCall.prototype = $extend(ink_runtime_RObject.prototype,{
	get_name: function() {
		return this._name;
	}
	,set_name: function(value) {
		this._name = value;
		if(!this._isPrototype) {
			var _this = ink_runtime_NativeFunctionCall._nativeFunctions;
			var key = this._name;
			this._prototype = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		}
		return this._name;
	}
	,get_numberOfParameters: function() {
		if(this._prototype != null) {
			return this._prototype.get_numberOfParameters();
		} else {
			return this._numberOfParameters;
		}
	}
	,set_numberOfParameters: function(value) {
		return this._numberOfParameters = value;
	}
	,Call: function(parameters) {
		if(this._prototype != null) {
			return this._prototype.Call(parameters);
		}
		if(this.get_numberOfParameters() != parameters.length) {
			throw new js__$Boot_HaxeError(new ink_runtime_SystemException("Unexpected number of parameters"));
		}
		var _g_head = parameters.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			if(js_Boot.__instanceof(val,ink_runtime_VoidObj)) {
				throw new js__$Boot_HaxeError(new ink_runtime_StoryException("Attempting to perform operation on a void value. Did you forget to 'return' a value from a function you called here?"));
			}
		}
		var coercedParams = this.CoerceValuesToSingleType(parameters);
		var coercedType = coercedParams.first().get_valueType();
		if(coercedType == 0) {
			return this.CallParamList(coercedParams);
		} else if(coercedType == 1) {
			return this.CallParamList(coercedParams);
		} else if(coercedType == 2) {
			return this.CallParamList(coercedParams);
		} else if(coercedType == 3) {
			return this.CallParamList(coercedParams);
		}
		return null;
	}
	,CallParamList: function(parametersOfSingleType) {
		var param1 = parametersOfSingleType.first();
		var valType = param1.get_valueType();
		var paramCount = parametersOfSingleType.length;
		if(paramCount == 2 || paramCount == 1) {
			var opForTypeObj = null;
			opForTypeObj = this._operationFuncs.h[valType];
			if(opForTypeObj == null) {
				throw new js__$Boot_HaxeError(new ink_runtime_StoryException("Can not perform operation '" + this._name + "' on " + valType));
			}
			if(paramCount == 2) {
				var iter_head = parametersOfSingleType.h;
				iter_head = iter_head.next;
				var val = iter_head.item;
				iter_head = iter_head.next;
				var opForType = opForTypeObj;
				var resultVal = opForType(param1.value,val.value);
				return ink_runtime_Value.Create(resultVal);
			} else {
				var opForType1 = opForTypeObj;
				return ink_runtime_Value.Create(opForType1(param1.value));
			}
		} else {
			throw new js__$Boot_HaxeError(new ink_runtime_SystemException("Unexpected number of parameters to NativeFunctionCall: " + parametersOfSingleType.length));
		}
	}
	,CoerceValuesToSingleType: function(parametersIn) {
		var valType = 0;
		var _g_head = parametersIn.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var val1 = val;
			if(val1.get_valueType() > 0) {
				valType = val1.get_valueType();
			}
		}
		var parametersOut = new List();
		var _g_head1 = parametersIn.h;
		while(_g_head1 != null) {
			var val2 = _g_head1.item;
			_g_head1 = _g_head1.next;
			parametersOut.add(val2.Cast(valType));
		}
		return parametersOut;
	}
	,_setupNameAndNumParams: function(name,numberOfParamters) {
		this._isPrototype = true;
		this.set_name(name);
		this.set_numberOfParameters(numberOfParamters);
	}
	,AddOpFuncForType: function(valType,op) {
		if(this._operationFuncs == null) {
			this._operationFuncs = new haxe_ds_IntMap();
		}
		this._operationFuncs.h[valType] = op;
	}
	,toString: function() {
		return "Native '" + this._name + "'";
	}
	,__class__: ink_runtime_NativeFunctionCall
	,__properties__: $extend(ink_runtime_RObject.prototype.__properties__,{set_numberOfParameters:"set_numberOfParameters",get_numberOfParameters:"get_numberOfParameters",set_name:"set_name",get_name:"get_name"})
});
var ink_runtime_Path = function() {
	ink_runtime_RObject.call(this);
	this.components = [];
};
ink_runtime_Path.__name__ = ["ink","runtime","Path"];
ink_runtime_Path.__interfaces__ = [ink_runtime_IEquatable];
ink_runtime_Path.__properties__ = {get_self:"get_self"}
ink_runtime_Path.createFromHeadAndTail = function(head,tail) {
	var me = new ink_runtime_Path();
	me.components.push(head);
	ink_runtime_LibUtil.addRangeForArray(me.components,tail.components);
	return me;
};
ink_runtime_Path.createFromComponents = function(components,relative) {
	if(relative == null) {
		relative = false;
	}
	var me = new ink_runtime_Path();
	ink_runtime_LibUtil.addRangeForArray(me.components,components);
	me.isRelative = relative;
	return me;
};
ink_runtime_Path.createFromComponentStack = function(components,relative) {
	if(relative == null) {
		relative = false;
	}
	var me = new ink_runtime_Path();
	var tmp = components.iterator();
	while(tmp.hasNext()) me.components.push(tmp.next());
	me.isRelative = relative;
	return me;
};
ink_runtime_Path.createFromString = function(componentsString) {
	var me = new ink_runtime_Path();
	me.set_componentsString(componentsString);
	return me;
};
ink_runtime_Path.get_self = function() {
	var path = new ink_runtime_Path();
	path.isRelative = true;
	return path;
};
ink_runtime_Path.__super__ = ink_runtime_RObject;
ink_runtime_Path.prototype = $extend(ink_runtime_RObject.prototype,{
	PathByAppendingPath: function(pathToAppend) {
		var p = new ink_runtime_Path();
		var upwardMoves = 0;
		var _g1 = 0;
		var _g = pathToAppend.components.length;
		while(_g1 < _g) if(pathToAppend.components[_g1++].get_isParent()) {
			++upwardMoves;
		} else {
			break;
		}
		var _g11 = 0;
		var _g2 = this.components.length - upwardMoves;
		while(_g11 < _g2) p.components.push(this.components[_g11++]);
		var _g12 = upwardMoves;
		var _g3 = pathToAppend.components.length;
		while(_g12 < _g3) p.components.push(pathToAppend.components[_g12++]);
		return p;
	}
	,get_head: function() {
		if(this.components.length > 0) {
			return this.components[0];
		} else {
			return null;
		}
	}
	,get_tail: function() {
		if(this.components.length >= 2) {
			return ink_runtime_Path.createFromComponents(this.components.slice(1,this.components.length));
		} else {
			return ink_runtime_Path.get_self();
		}
	}
	,get_length: function() {
		return this.components.length;
	}
	,get_lastComponent: function() {
		if(this.components.length > 0) {
			return this.components[this.components.length - 1];
		} else {
			return null;
		}
	}
	,get_containsNamedComponent: function() {
		var _g = 0;
		var _g1 = this.components;
		while(_g < _g1.length) {
			var comp = _g1[_g];
			++_g;
			if(!comp.get_isIndex()) {
				return true;
			}
		}
		return false;
	}
	,get_componentsString: function() {
		var compsStr = this.components.join(".");
		if(this.isRelative) {
			return "." + compsStr;
		} else {
			return compsStr;
		}
	}
	,set_componentsString: function(value) {
		this.components.length = 0;
		var componentsStr = value;
		if(value == "" || value == null) {
			return value;
		}
		if(value.charAt(0) == ".") {
			this.isRelative = true;
			componentsStr = value.substring(1);
		} else {
			this.isRelative = false;
		}
		var componentStrings = componentsStr.split(".");
		var _g = 0;
		while(_g < componentStrings.length) {
			var str = componentStrings[_g];
			++_g;
			var index = Std.parseInt(str);
			if(index != null && !isNaN(index)) {
				this.components.push(ink_runtime_Component.createFromIndex(index));
			} else {
				this.components.push(ink_runtime_Component.createFromName(str));
			}
		}
		return value;
	}
	,toString: function() {
		return this.get_componentsString();
	}
	,Equals: function(obj) {
		return this.EqualsPath(js_Boot.__instanceof(obj,ink_runtime_Path)?obj:null);
	}
	,EqualsPath: function(otherPath) {
		if(otherPath == null) {
			return false;
		}
		if(otherPath.components.length != this.components.length) {
			return false;
		}
		if(otherPath.isRelative != this.isRelative) {
			return false;
		}
		return ink_runtime_LibUtil.arraySequenceEquals(otherPath.components,this.components);
	}
	,__class__: ink_runtime_Path
	,__properties__: $extend(ink_runtime_RObject.prototype.__properties__,{set_componentsString:"set_componentsString",get_componentsString:"get_componentsString",get_containsNamedComponent:"get_containsNamedComponent",get_lastComponent:"get_lastComponent",get_length:"get_length",get_tail:"get_tail",get_head:"get_head"})
});
var ink_runtime_Component = function() {
};
ink_runtime_Component.__name__ = ["ink","runtime","Component"];
ink_runtime_Component.__interfaces__ = [ink_runtime_IEquatable];
ink_runtime_Component.createFromIndex = function(index) {
	var me = new ink_runtime_Component();
	if(index < 0) {
		throw new js__$Boot_HaxeError("assertion failed index >=0");
	}
	me.index = index;
	me.name = null;
	return me;
};
ink_runtime_Component.createFromName = function(name) {
	var me = new ink_runtime_Component();
	if(!(name != null && name.length > 0)) {
		throw new js__$Boot_HaxeError("assertion failed:name != null && name.Length > 0");
	}
	me.name = name;
	me.index = -1;
	return me;
};
ink_runtime_Component.ToParent = function() {
	return ink_runtime_Component.createFromName(ink_runtime_Path.parentId);
};
ink_runtime_Component.prototype = {
	get_isIndex: function() {
		return this.index >= 0;
	}
	,get_isParent: function() {
		return this.name == ink_runtime_Path.parentId;
	}
	,toString: function() {
		if(this.get_isIndex()) {
			return Std.string(this.index);
		} else {
			return this.name;
		}
	}
	,Equals: function(obj) {
		return this.EqualsComponent(js_Boot.__instanceof(obj,ink_runtime_Component)?obj:null);
	}
	,EqualsComponent: function(otherComp) {
		if(otherComp != null && otherComp.get_isIndex() == this.get_isIndex()) {
			if(this.get_isIndex()) {
				return this.index == otherComp.index;
			} else {
				return this.name == otherComp.name;
			}
		}
		return false;
	}
	,__class__: ink_runtime_Component
	,__properties__: {get_isParent:"get_isParent",get_isIndex:"get_isIndex"}
};
var ink_runtime_Story = $hx_exports["ink"]["runtime"]["Story"] = function(jsonString) {
	ink_runtime_RObject.call(this);
	this._mainContentContainer = null;
	this._externals = new haxe_ds_StringMap();
	var rootObject = JSON.parse(jsonString);
	var versionObj = Reflect.field(rootObject,"inkVersion");
	if(versionObj == null) {
		throw new js__$Boot_HaxeError(new ink_runtime_SystemException("ink version number not found. Are you sure it's a valid .ink.json file?"));
	}
	var formatFromFile = versionObj | 0;
	if(formatFromFile > 12) {
		throw new js__$Boot_HaxeError(new ink_runtime_SystemException("Version of ink used to build story was newer than the current verison of the engine"));
	} else if(formatFromFile < 12) {
		throw new js__$Boot_HaxeError(new ink_runtime_SystemException("Version of ink used to build story is too old to be loaded by this verison of the engine"));
	} else if(formatFromFile != 12) {
		console.log("WARNING: Version of ink used to build story doesn't match current version of engine. Non-critical, but recommend synchronising.");
	}
	var rootToken = Reflect.field(rootObject,"root");
	if(rootToken == null) {
		throw new js__$Boot_HaxeError(new ink_runtime_SystemException("Root node for ink not found. Are you sure it's a valid .ink.json file?"));
	}
	var obj = ink_runtime_Json.JTokenToRuntimeObject(rootToken);
	this._mainContentContainer = js_Boot.__instanceof(obj,ink_runtime_Container)?obj:null;
	this.ResetState();
	window.Object.defineProperty(this,"canContinue",{ get : $bind(this,this.get_canContinue)});
	window.Object.defineProperty(this,"currentChoices",{ get : $bind(this,this.get_currentChoices)});
	window.Object.defineProperty(this,"state",{ get : $bind(this,this.get_state)});
	window.Object.defineProperty(this,"variablesState",{ get : $bind(this,this.getVariableesStateProxy)});
};
ink_runtime_Story.__name__ = ["ink","runtime","Story"];
ink_runtime_Story.createFromContainer = function(contentContainer) {
	var me = Type.createEmptyInstance(ink_runtime_Story);
	me._mainContentContainer = contentContainer;
	me._externals = new haxe_ds_StringMap();
	return me;
};
ink_runtime_Story.__super__ = ink_runtime_RObject;
ink_runtime_Story.prototype = $extend(ink_runtime_RObject.prototype,{
	get_currentChoices: function() {
		var choices = [];
		var _g_head = this._state.currentChoices.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			if(!val.choicePoint.isInvisibleDefault) {
				val.index = choices.length;
				choices.push(val);
			}
		}
		return choices;
	}
	,get_currentText: function() {
		return this._state.get_currentText();
	}
	,get_currentErrors: function() {
		return this._state.currentErrors;
	}
	,get_hasErrorThrow: function() {
		return this._state.get_hasError();
	}
	,get_variablesState: function() {
		return this._state.variablesState;
	}
	,getVariableesStateProxy: function() {
		return this._state.variablesState._jsProxy;
	}
	,get_state: function() {
		return this._state;
	}
	,setupFromContainer: function(contentContainer) {
		this._mainContentContainer = contentContainer;
		this._externals = new haxe_ds_StringMap();
	}
	,ToJsonString: function() {
		return JSON.stringify({ inkVersion : 12, root : ink_runtime_Json.RuntimeObjectToJToken(this._mainContentContainer)});
	}
	,ResetState: function() {
		this._state = new ink_runtime_StoryState(this);
		this._state.variablesState.ObserveVariableChange($bind(this,this.VariableStateDidChangeEvent));
		this.ResetGlobals();
	}
	,ResetErrors: function() {
		this._state.ResetErrors();
	}
	,ResetCallstack: function() {
		this._state.ForceEndFlow();
	}
	,ResetGlobals: function() {
		var _this = this._mainContentContainer.namedContent;
		if(__map_reserved["global decl"] != null?_this.existsReserved("global decl"):_this.h.hasOwnProperty("global decl")) {
			var originalPath = this._state.get_currentPath();
			this.ChoosePathString("global decl");
			this.ContinueInternal();
			this._state.set_currentPath(originalPath);
		}
	}
	,BuildStringOfHierarchy: function() {
		var sb = new StringBuf();
		var tmp = this._state.get_currentContentObject();
		this.get_mainContentContainer().BuildStringOfHierarchy(sb,0,tmp);
		return sb.b;
	}
	,NextContent: function() {
		this._state.set_previousContentObject(this._state.get_currentContentObject());
		if(this._state.divertedTargetObject != null) {
			this._state.set_currentContentObject(this._state.divertedTargetObject);
			this._state.divertedTargetObject = null;
			this.VisitChangedContainersDueToDivert();
			if(this._state.get_currentContentObject() != null) {
				return;
			}
		}
		if(!this.IncrementContentPointer()) {
			var didPop = false;
			if(this._state.callStack.CanPop(1)) {
				this._state.callStack.Pop(1);
				if(this._state.get_inExpressionEvaluation()) {
					this._state.PushEvaluationStack(new ink_runtime_VoidObj());
				}
				didPop = true;
			} else if(this._state.callStack.get_canPopThread()) {
				this._state.callStack.PopThread();
				didPop = true;
			}
			if(didPop && this._state.get_currentContentObject() != null) {
				this.NextContent();
			}
		}
	}
	,IncrementContentPointer: function() {
		var successfulIncrement = true;
		var currEl = this._state.callStack.get_currentElement();
		currEl.currentContentIndex++;
		while(currEl.currentContentIndex >= currEl.currentContainer._content.length) {
			successfulIncrement = false;
			var obj = currEl.currentContainer.parent;
			var nextAncestor = js_Boot.__instanceof(obj,ink_runtime_Container)?obj:null;
			if(nextAncestor == null) {
				break;
			}
			var indexInAncestor = nextAncestor._content.indexOf(currEl.currentContainer);
			if(indexInAncestor == -1) {
				break;
			}
			currEl.currentContainer = nextAncestor;
			currEl.currentContentIndex = indexInAncestor + 1;
			successfulIncrement = true;
		}
		if(!successfulIncrement) {
			currEl.currentContainer = null;
		}
		return successfulIncrement;
	}
	,TryFollowDefaultInvisibleChoice: function() {
		var allChoices = this._state.currentChoices;
		var invisibleChoices = allChoices.filter(function(c) {
			return c.choicePoint.isInvisibleDefault;
		});
		if(invisibleChoices.length == 0 || allChoices.length > invisibleChoices.length) {
			return false;
		}
		this.ChoosePath(invisibleChoices.first().choicePoint.get_choiceTarget().get_path());
		return true;
	}
	,VisitCountForContainer: function(container) {
		if(!container.visitsShouldBeCounted) {
			this.ErrorThrow("Read count for target (" + container.name + " - on " + Std.string(container.get_debugMetadata()) + ") unknown. The story may need to be compiled with countAllVisits flag (-c).");
			return 0;
		}
		var count = 0;
		var containerPathStr = container.get_path().toString();
		var _this = this._state.visitCounts;
		var tryCount = __map_reserved[containerPathStr] != null?_this.getReserved(containerPathStr):_this.h[containerPathStr];
		if(tryCount != null && !isNaN(tryCount)) {
			count = tryCount;
		}
		return count;
	}
	,IncrementVisitCountForContainer: function(container) {
		var count = 0;
		var containerPathStr = container.get_path().toString();
		var _this = this._state.visitCounts;
		var tryCount = __map_reserved[containerPathStr] != null?_this.getReserved(containerPathStr):_this.h[containerPathStr];
		if(tryCount != null && !isNaN(tryCount)) {
			count = tryCount;
		}
		++count;
		var _this1 = this._state.visitCounts;
		if(__map_reserved[containerPathStr] != null) {
			_this1.setReserved(containerPathStr,count);
		} else {
			_this1.h[containerPathStr] = count;
		}
	}
	,RecordTurnIndexVisitToContainer: function(container) {
		var containerPathStr = container.get_path().toString();
		var value = this._state.currentTurnIndex;
		var _this = this._state.turnIndices;
		if(__map_reserved[containerPathStr] != null) {
			_this.setReserved(containerPathStr,value);
		} else {
			_this.h[containerPathStr] = value;
		}
	}
	,TurnsSinceForContainer: function(container) {
		if(!container.turnIndexShouldBeCounted) {
			this.ErrorThrow("TURNS_SINCE() for target (" + container.name + " - on " + Std.string(container.get_debugMetadata()) + ") unknown. The story may need to be compiled with countAllVisits flag (-c).");
		}
		var containerPathStr = container.get_path().toString();
		var _this = this._state.turnIndices;
		var index = __map_reserved[containerPathStr] != null?_this.getReserved(containerPathStr):_this.h[containerPathStr];
		if(index != null && !isNaN(index)) {
			return this._state.currentTurnIndex - index;
		} else {
			return -1;
		}
	}
	,NextSequenceShuffleIndex: function() {
		var obj = this._state.PopEvaluationStack();
		var numElementsIntVal = js_Boot.__instanceof(obj,ink_runtime_IntValue)?obj:null;
		if(numElementsIntVal == null) {
			this.ErrorThrow("expected number of elements in sequence for shuffle index");
			return 0;
		}
		var seqContainer = this._state.get_currentContainer();
		var numElements = numElementsIntVal.value;
		var obj1 = this._state.PopEvaluationStack();
		var seqCount = (js_Boot.__instanceof(obj1,ink_runtime_IntValue)?obj1:null).value;
		var loopIndex = seqCount / numElements | 0;
		var iterationIndex = seqCount % numElements;
		var seqPathStr = seqContainer.get_path().toString();
		var sequenceHash = 0;
		var _g1 = 0;
		var _g = seqPathStr.length;
		while(_g1 < _g) sequenceHash += seqPathStr.charCodeAt(_g1++);
		var random = new ink_random_ParkMiller(sequenceHash + loopIndex + this._state.storySeed);
		var unpickedIndices = [];
		var _g11 = 0;
		while(_g11 < numElements) unpickedIndices.push(_g11++);
		var _g12 = 0;
		var _g2 = iterationIndex + 1;
		while(_g12 < _g2) {
			var i = _g12++;
			var chosen = Math.round(-0.4999 + (unpickedIndices.length - 1 + .4999 - -0.4999) * random.randomFloat());
			var chosenIndex = unpickedIndices[chosen];
			unpickedIndices.splice(chosen,1);
			if(i == iterationIndex) {
				return chosenIndex;
			}
		}
		throw new js__$Boot_HaxeError(new ink_runtime_SystemException("Should never reach here"));
	}
	,ErrorThrow: function(message,useEndLineNumber) {
		if(useEndLineNumber == null) {
			useEndLineNumber = false;
		}
		var e = new ink_runtime_StoryException(message);
		e.useEndLineNumber = useEndLineNumber;
		throw new js__$Boot_HaxeError(e);
	}
	,AddErrorThrow: function(message,useEndLineNumber) {
		var dm = this.get_currentDebugMetadata();
		if(dm != null) {
			message = "RUNTIME ERROR: '" + dm.fileName + "' line " + (useEndLineNumber?dm.endLineNumber:dm.startLineNumber) + ": " + message;
		} else {
			message = "RUNTIME ERROR: " + message;
		}
		this._state.AddError(message);
		this._state.ForceEndFlow();
	}
	,get_currentDebugMetadata: function() {
		var dm;
		var currentContent = this._state.get_currentContentObject();
		if(currentContent != null) {
			dm = currentContent.get_debugMetadata();
			if(dm != null) {
				return dm;
			}
		}
		var i = this._state.callStack.get_elements().length - 1;
		while(i >= 0) {
			var currentObj = this._state.callStack.get_elements()[i].get_currentObject();
			if(currentObj != null && currentObj.get_debugMetadata() != null) {
				return currentObj.get_debugMetadata();
			}
			--i;
		}
		i = this._state.get_outputStream().length - 1;
		while(i >= 0) {
			dm = this._state.get_outputStream()[i].get_debugMetadata();
			if(dm != null) {
				return dm;
			}
			--i;
		}
		return null;
	}
	,VariableStateDidChangeEvent: function(variableName,newValueObj) {
		if(this._variableObservers == null) {
			return;
		}
		var observers = null;
		var _this = this._variableObservers;
		observers = __map_reserved[variableName] != null?_this.getReserved(variableName):_this.h[variableName];
		if(observers != null) {
			if(!js_Boot.__instanceof(newValueObj,ink_runtime_Value)) {
				throw new js__$Boot_HaxeError(new ink_runtime_SystemException("Tried to get the value of a variable that isn't a standard type"));
			}
			observers(variableName,(js_Boot.__instanceof(newValueObj,ink_runtime_Value)?newValueObj:null).get_valueObject());
		}
	}
	,Continue: function() {
		if(!this._hasValidatedExternals) {
			this.ValidateExternalBindings();
		}
		return this.ContinueInternal();
	}
	,ContinueInternal: function() {
		if(!this.get_canContinue()) {
			throw new js__$Boot_HaxeError(new ink_runtime_StoryException("Can't continue - should check canContinue before calling Continue"));
		}
		this._state.ResetOutput();
		this._state.didSafeExit = false;
		this._state.variablesState.set_batchObservingVariableChanges(true);
		var stateAtLastNewline = null;
		var count = 0;
		while(true) {
			if(count++ > 99999) {
				throw new js__$Boot_HaxeError("Count iteration limit reached");
			}
			this.Step();
			if(!this.get_canContinue()) {
				this.TryFollowDefaultInvisibleChoice();
			}
			if(!this._state.get_inStringEvaluation()) {
				if(stateAtLastNewline != null) {
					var currText = this.get_currentText();
					var prevTextLength = stateAtLastNewline.get_currentText().length;
					if(currText != stateAtLastNewline.get_currentText()) {
						if(currText.length >= prevTextLength && currText.charAt(prevTextLength - 1) == "\n") {
							this.RestoreStateSnapshot(stateAtLastNewline);
							break;
						} else {
							stateAtLastNewline = null;
						}
					}
				}
				if(this._state.get_outputStreamEndsInNewline()) {
					if(this.get_canContinue()) {
						stateAtLastNewline = this.StateSnapshot();
					} else {
						stateAtLastNewline = null;
					}
				}
			}
			if(!this.get_canContinue()) {
				break;
			}
		}
		if(stateAtLastNewline != null) {
			this.RestoreStateSnapshot(stateAtLastNewline);
		}
		if(!this.get_canContinue()) {
			if(this._state.callStack.get_canPopThread()) {
				this.ErrorThrow("Thread available to pop, threads should always be flat by the end of evaluation?");
			}
			if(this.get_currentChoices().length == 0 && !this._state.didSafeExit && this._temporaryEvaluationContainer == null) {
				if(this._state.callStack.CanPop(0)) {
					this.ErrorThrow("unexpectedly reached end of content. Do you need a '->->' to return from a tunnel?");
				} else if(this._state.callStack.CanPop(1)) {
					this.ErrorThrow("unexpectedly reached end of content. Do you need a '~ return'?");
				} else if(!this._state.callStack.get_canPop()) {
					this.ErrorThrow("ran out of content. Do you need a '-> DONE' or '-> END'?");
				} else {
					this.ErrorThrow("unexpectedly reached end of content for unknown reason. Please debug compiler!");
				}
			}
		}
		this._state.didSafeExit = false;
		this._state.variablesState.set_batchObservingVariableChanges(false);
		return this.get_currentText();
	}
	,get_canContinue: function() {
		if(this._state.get_currentContentObject() != null) {
			return !this._state.get_hasError();
		} else {
			return false;
		}
	}
	,ContinueMaximally: function() {
		var sb_b = "";
		while(this.get_canContinue()) sb_b += Std.string(this.Continue());
		return sb_b;
	}
	,ContentAtPath: function(path) {
		return this.get_mainContentContainer().ContentAtPath(path);
	}
	,StateSnapshot: function() {
		return this._state.Copy();
	}
	,RestoreStateSnapshot: function(state) {
		this._state = state;
	}
	,Step: function() {
		var shouldAddToStream = true;
		var currentContentObj = this._state.get_currentContentObject();
		if(currentContentObj == null) {
			return;
		}
		var currentContainer = js_Boot.__instanceof(currentContentObj,ink_runtime_Container)?currentContentObj:null;
		while(currentContainer != null) {
			this.VisitContainer(currentContainer,true);
			if(currentContainer._content.length == 0) {
				break;
			}
			currentContentObj = currentContainer._content[0];
			this._state.callStack.get_currentElement().currentContentIndex = 0;
			this._state.callStack.get_currentElement().currentContainer = currentContainer;
			currentContainer = js_Boot.__instanceof(currentContentObj,ink_runtime_Container)?currentContentObj:null;
		}
		this._state.callStack.get_currentElement();
		var isLogicOrFlowControl = this.PerformLogicAndFlowControl(currentContentObj);
		if(this._state.get_currentContentObject() == null) {
			return;
		}
		if(isLogicOrFlowControl) {
			shouldAddToStream = false;
		}
		var choicePoint = js_Boot.__instanceof(currentContentObj,ink_runtime_ChoicePoint)?currentContentObj:null;
		if(choicePoint != null) {
			var choice = this.ProcessChoice(choicePoint);
			if(choice != null) {
				this._state.currentChoices.add(choice);
			}
			currentContentObj = null;
			shouldAddToStream = false;
		}
		if(js_Boot.__instanceof(currentContentObj,ink_runtime_Container)) {
			shouldAddToStream = false;
		}
		if(shouldAddToStream) {
			var varPointer = js_Boot.__instanceof(currentContentObj,ink_runtime_VariablePointerValue)?currentContentObj:null;
			if(varPointer != null && varPointer.contextIndex == -1) {
				var contextIdx = this._state.callStack.ContextForVariableNamed(varPointer.get_variableName());
				currentContentObj = new ink_runtime_VariablePointerValue(varPointer.get_variableName(),contextIdx);
			}
			if(this._state.get_inExpressionEvaluation()) {
				this._state.PushEvaluationStack(currentContentObj);
			} else {
				this._state.PushToOutputStream(currentContentObj);
			}
		}
		this.NextContent();
		var controlCmd = js_Boot.__instanceof(currentContentObj,ink_runtime_ControlCommand)?currentContentObj:null;
		if(controlCmd != null && controlCmd.commandType == 14) {
			this._state.callStack.PushThread();
		}
	}
	,VisitContainer: function(container,atStart) {
		if(!container.countingAtStartOnly || atStart) {
			if(container.visitsShouldBeCounted) {
				this.IncrementVisitCountForContainer(container);
			}
			if(container.turnIndexShouldBeCounted) {
				this.RecordTurnIndexVisitToContainer(container);
			}
		}
	}
	,ProcessChoice: function(choicePoint) {
		var showChoice = true;
		if(choicePoint.hasCondition) {
			if(!this.IsTruthy(this._state.PopEvaluationStack())) {
				showChoice = false;
			}
		}
		var startText = "";
		var choiceOnlyText = "";
		if(choicePoint.hasChoiceOnlyContent) {
			var obj = this._state.PopEvaluationStack();
			choiceOnlyText = (js_Boot.__instanceof(obj,ink_runtime_StringValue)?obj:null).value;
		}
		if(choicePoint.hasStartContent) {
			var obj1 = this._state.PopEvaluationStack();
			startText = (js_Boot.__instanceof(obj1,ink_runtime_StringValue)?obj1:null).value;
		}
		if(choicePoint.onceOnly) {
			if(this.VisitCountForContainer(choicePoint.get_choiceTarget()) > 0) {
				showChoice = false;
			}
		}
		var choice = ink_runtime_Choice.create(choicePoint);
		choice.threadAtGeneration = this._state.callStack.get_currentThread().Copy();
		if(!showChoice) {
			return null;
		}
		choice.text = startText + choiceOnlyText;
		return choice;
	}
	,IsTruthy: function(obj) {
		if(js_Boot.__instanceof(obj,ink_runtime_Value)) {
			var val = js_Boot.__instanceof(obj,ink_runtime_Value)?obj:null;
			if(js_Boot.__instanceof(val,ink_runtime_DivertTargetValue)) {
				this.ErrorThrow("Shouldn't use a divert target (to " + Std.string(val.get_targetPath()) + ") as a conditional value. Did you intend a function call 'likeThis()' or a read count check 'likeThis'? (no arrows)");
				return false;
			}
			return val.get_isTruthy();
		}
		return false;
	}
	,PerformLogicAndFlowControl: function(contentObj) {
		if(contentObj == null) {
			return false;
		}
		if(js_Boot.__instanceof(contentObj,ink_runtime_Divert)) {
			var currentDivert = contentObj;
			if(currentDivert.isConditional) {
				if(!this.IsTruthy(this._state.PopEvaluationStack())) {
					return true;
				}
			}
			if(currentDivert.get_hasVariableTarget()) {
				var varName = currentDivert.variableDivertName;
				var varContents = this._state.variablesState.GetVariableWithName(varName);
				if(!js_Boot.__instanceof(varContents,ink_runtime_DivertTargetValue)) {
					var intContent = js_Boot.__instanceof(varContents,ink_runtime_IntValue)?varContents:null;
					var errorMessage = "Tried to divert to a target from a variable, but the variable (" + varName + ") didn't contain a divert target, it ";
					if(intContent != null && intContent.value == 0) {
						errorMessage += "was empty/null (the value 0).";
					} else {
						errorMessage += "contained '" + Std.string(varContents) + "'.";
					}
					this.ErrorThrow(errorMessage);
				}
				this._state.divertedTargetObject = this.ContentAtPath(varContents.get_targetPath());
			} else if(currentDivert.isExternal) {
				this.CallExternalFunction(currentDivert.get_targetPathString(),currentDivert.externalArgs);
				return true;
			} else {
				this._state.divertedTargetObject = currentDivert.get_targetContent();
			}
			if(currentDivert.pushesToStack) {
				this._state.callStack.Push(currentDivert.stackPushType);
			}
			if(this._state.divertedTargetObject == null && !currentDivert.isExternal) {
				if(currentDivert != null && currentDivert.get_debugMetadata().sourceName != null) {
					this.ErrorThrow("Divert target doesn't exist: " + currentDivert.get_debugMetadata().sourceName);
				} else {
					this.ErrorThrow("Divert resolution failed: " + Std.string(currentDivert));
				}
			}
			return true;
		} else if(js_Boot.__instanceof(contentObj,ink_runtime_ControlCommand)) {
			var evalCommand = contentObj;
			switch(evalCommand.commandType) {
			case 0:
				if(this._state.get_inExpressionEvaluation() != false) {
					throw new js__$Boot_HaxeError("Already in expression evaluation?");
				}
				this._state.set_inExpressionEvaluation(true);
				break;
			case 1:
				if(this._state.evaluationStack.length > 0) {
					var output = this._state.PopEvaluationStack();
					if(!js_Boot.__instanceof(output,ink_runtime_VoidObj)) {
						this._state.PushToOutputStream(new ink_runtime_StringValue(Std.string(output)));
					}
				}
				break;
			case 2:
				if(this._state.get_inExpressionEvaluation() != true) {
					throw new js__$Boot_HaxeError("Not in expression evaluation mode");
				}
				this._state.set_inExpressionEvaluation(false);
				break;
			case 3:
				this._state.PushEvaluationStack(this._state.PeekEvaluationStack());
				break;
			case 4:
				this._state.PopEvaluationStack();
				break;
			case 5:case 6:
				var popType = evalCommand.commandType == 5?1:0;
				if(this._state.callStack.get_currentElement().type != popType || !this._state.callStack.get_canPop()) {
					var names_h = { };
					names_h[1] = "function return statement (~ return)";
					names_h[0] = "tunnel onwards statement (->->)";
					var expected = names_h[this._state.callStack.get_currentElement().type];
					if(!this._state.callStack.get_canPop()) {
						expected = "end of flow (-> END or choice)";
					}
					this.ErrorThrow("Found " + names_h[popType] + ", when expected " + expected);
				} else {
					this._state.callStack.Pop();
				}
				break;
			case 7:
				this._state.PushToOutputStream(evalCommand);
				if(this._state.get_inExpressionEvaluation() != true) {
					throw new js__$Boot_HaxeError("Expected to be in an expression when evaluating a string");
				}
				this._state.set_inExpressionEvaluation(false);
				break;
			case 8:
				var contentStackForString = new haxe_ds_GenericStack();
				var outputCountConsumed = 0;
				var i = this._state.get_outputStream().length - 1;
				while(i >= 0) {
					var obj = this._state.get_outputStream()[i];
					++outputCountConsumed;
					var command = js_Boot.__instanceof(obj,ink_runtime_ControlCommand)?obj:null;
					if(command != null && command.commandType == 7) {
						break;
					}
					if(js_Boot.__instanceof(obj,ink_runtime_StringValue)) {
						contentStackForString.head = new haxe_ds_GenericCell(obj,contentStackForString.head);
					}
					--i;
				}
				var tmp = this._state.get_outputStream().length - outputCountConsumed;
				this._state.get_outputStream().splice(tmp,outputCountConsumed);
				var sb = new StringBuf();
				var tmp1 = contentStackForString.iterator();
				while(tmp1.hasNext()) sb.b += Std.string(Std.string(tmp1.next()));
				this._state.set_inExpressionEvaluation(true);
				this._state.PushEvaluationStack(new ink_runtime_StringValue(Std.string(sb)));
				break;
			case 9:
				break;
			case 10:
				this._state.PushEvaluationStack(new ink_runtime_IntValue(this.get_currentChoices().length));
				break;
			case 11:
				var target = this._state.PopEvaluationStack();
				if(!js_Boot.__instanceof(target,ink_runtime_DivertTargetValue)) {
					var extraNote = "";
					if(js_Boot.__instanceof(target,ink_runtime_IntValue)) {
						extraNote = ". Did you accidentally pass a read count ('knot_name') instead of a target ('-> knot_name')?";
					}
					this.ErrorThrow("TURNS_SINCE expected a divert target (knot, stitch, label name), but saw " + Std.string(target) + extraNote);
				} else {
					var obj1 = this.ContentAtPath((js_Boot.__instanceof(target,ink_runtime_DivertTargetValue)?target:null).get_targetPath());
					this._state.PushEvaluationStack(new ink_runtime_IntValue(this.TurnsSinceForContainer(js_Boot.__instanceof(obj1,ink_runtime_Container)?obj1:null)));
				}
				break;
			case 12:
				this._state.PushEvaluationStack(new ink_runtime_IntValue(this.VisitCountForContainer(this._state.get_currentContainer()) - 1));
				break;
			case 13:
				this._state.PushEvaluationStack(new ink_runtime_IntValue(this.NextSequenceShuffleIndex()));
				break;
			case 14:
				break;
			case 15:
				if(this._state.callStack.get_canPopThread()) {
					this._state.callStack.PopThread();
				} else {
					this._state.didSafeExit = true;
				}
				break;
			case 16:
				this._state.ForceEndFlow();
				break;
			default:
				this.ErrorThrow("unhandled ControlCommand: " + Std.string(evalCommand));
			}
			return true;
		} else if(js_Boot.__instanceof(contentObj,ink_runtime_VariableAssignment)) {
			this._state.variablesState.Assign(contentObj,this._state.PopEvaluationStack());
			return true;
		} else if(js_Boot.__instanceof(contentObj,ink_runtime_VariableReference)) {
			var varRef = contentObj;
			var foundValue = null;
			if(varRef.pathForCount != null) {
				foundValue = new ink_runtime_IntValue(this.VisitCountForContainer(varRef.get_containerForCount()));
			} else {
				foundValue = this._state.variablesState.GetVariableWithName(varRef.name);
				if(foundValue == null) {
					this.ErrorThrow("Uninitialised variable: " + varRef.name);
					foundValue = new ink_runtime_IntValue(0);
				}
			}
			this._state.evaluationStack.push(foundValue);
			return true;
		} else if(js_Boot.__instanceof(contentObj,ink_runtime_NativeFunctionCall)) {
			var func = contentObj;
			this._state.evaluationStack.push(func.Call(ink_runtime_LibUtil.arrayToList(this._state.PopEvaluationStack1(func.get_numberOfParameters()))));
			return true;
		}
		return false;
	}
	,ChoosePathString: function(path) {
		this.ChoosePath(ink_runtime_Path.createFromString(path));
	}
	,ChoosePath: function(path) {
		this._state.SetChosenPath(path);
		this.VisitChangedContainersDueToDivert();
	}
	,VisitChangedContainersDueToDivert: function() {
		var previousContentObject = this._state.get_previousContentObject();
		var newContentObject = this._state.get_currentContentObject();
		if(newContentObject == null) {
			return;
		}
		var prevContainerSet = new ink_runtime_HashSet();
		if(previousContentObject != null) {
			var prevAncestor;
			if(js_Boot.__instanceof(previousContentObject,ink_runtime_Container)) {
				prevAncestor = js_Boot.__instanceof(previousContentObject,ink_runtime_Container)?previousContentObject:null;
			} else {
				var obj = previousContentObject.parent;
				if(js_Boot.__instanceof(obj,ink_runtime_Container)) {
					prevAncestor = obj;
				} else {
					prevAncestor = null;
				}
			}
			while(prevAncestor != null) {
				prevContainerSet.add(prevAncestor);
				var obj1 = prevAncestor.parent;
				if(js_Boot.__instanceof(obj1,ink_runtime_Container)) {
					prevAncestor = obj1;
				} else {
					prevAncestor = null;
				}
			}
		}
		var currentChildOfContainer = newContentObject;
		var obj2 = newContentObject.parent;
		var currentContainerAncestor = js_Boot.__instanceof(obj2,ink_runtime_Container)?obj2:null;
		while(currentContainerAncestor != null && !prevContainerSet.contains(currentContainerAncestor)) {
			this.VisitContainer(currentContainerAncestor,currentContainerAncestor._content.length > 0 && currentChildOfContainer == currentContainerAncestor._content[0]);
			currentChildOfContainer = currentContainerAncestor;
			var obj3 = currentContainerAncestor.parent;
			if(js_Boot.__instanceof(obj3,ink_runtime_Container)) {
				currentContainerAncestor = obj3;
			} else {
				currentContainerAncestor = null;
			}
		}
	}
	,get_mainContentContainer: function() {
		if(this._temporaryEvaluationContainer != null) {
			return this._temporaryEvaluationContainer;
		} else {
			return this._mainContentContainer;
		}
	}
	,ChooseChoiceIndex: function(choiceIdx) {
		var choices = this.get_currentChoices();
		if(!(choiceIdx >= 0 && choiceIdx < choices.length)) {
			throw new js__$Boot_HaxeError("choice out of range");
		}
		var choiceToChoose = choices[choiceIdx];
		this._state.callStack.set_currentThread(choiceToChoose.threadAtGeneration);
		this.ChoosePath(choiceToChoose.choicePoint.get_choiceTarget().get_path());
	}
	,HasFunction: function(functionName) {
		try {
			return js_Boot.__instanceof(this.ContentAtPath(ink_runtime_Path.createFromString(functionName)),ink_runtime_Container);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,haxe_io_Error) ) {
				return false;
			} else throw(e);
		}
	}
	,CallExternalFunction: function(funcName,numberOfArguments) {
		var func = null;
		var fallbackFunctionContainer = null;
		var _this = this._externals;
		func = __map_reserved[funcName] != null?_this.getReserved(funcName):_this.h[funcName];
		if(func == null) {
			if(this.allowExternalFunctionFallbacks) {
				var obj = this.ContentAtPath(ink_runtime_Path.createFromString(funcName));
				if(js_Boot.__instanceof(obj,ink_runtime_Container)) {
					fallbackFunctionContainer = obj;
				} else {
					fallbackFunctionContainer = null;
				}
				if(fallbackFunctionContainer == null) {
					throw new js__$Boot_HaxeError("Trying to call EXTERNAL function '" + funcName + "' which has not been bound, and fallback ink function could not be found.");
				}
				this._state.callStack.Push(1);
				this._state.divertedTargetObject = fallbackFunctionContainer;
				return;
			} else {
				throw new js__$Boot_HaxeError("Trying to call EXTERNAL function '" + funcName + "' which has not been bound (and ink fallbacks disabled).");
			}
		}
		var $arguments = [];
		var _g1 = 0;
		while(_g1 < numberOfArguments) {
			++_g1;
			var obj1 = this._state.PopEvaluationStack();
			$arguments.push((js_Boot.__instanceof(obj1,ink_runtime_Value)?obj1:null).get_valueObject());
		}
		$arguments.reverse();
		var funcResult = func($arguments);
		var returnObj = null;
		if(funcResult != null) {
			returnObj = ink_runtime_Value.Create(funcResult);
			var error = "Could not create ink value from returned object of type " + Type.getClassName(funcResult == null?null:js_Boot.getClass(funcResult));
			if(returnObj == null) {
				throw new js__$Boot_HaxeError(error);
			}
		} else {
			returnObj = new ink_runtime_VoidObj();
		}
		this._state.PushEvaluationStack(returnObj);
	}
	,TryCoerce: function(value) {
		return value;
	}
	,BindExternalFunctionGeneral: function(funcName,func) {
		var _this = this._externals;
		if(!(!(__map_reserved[funcName] != null?_this.existsReserved(funcName):_this.h.hasOwnProperty(funcName)))) {
			throw new js__$Boot_HaxeError("Function '" + funcName + "' has already been bound.");
		}
		var _this1 = this._externals;
		if(__map_reserved[funcName] != null) {
			_this1.setReserved(funcName,func);
		} else {
			_this1.h[funcName] = func;
		}
	}
	,BindExternalFunction0: function(funcName,func) {
		if(func == null) {
			throw new js__$Boot_HaxeError("Can't bind a null function");
		}
		this.BindExternalFunctionGeneral(funcName,function(args) {
			if(args.length != 0) {
				throw new js__$Boot_HaxeError("External function expected no arguments");
			}
			return func();
		});
	}
	,BindExternalFunction1: function(funcName,func) {
		if(func == null) {
			throw new js__$Boot_HaxeError("Can't bind a null function");
		}
		this.BindExternalFunctionGeneral(funcName,function(args) {
			if(args.length != 1) {
				throw new js__$Boot_HaxeError("External function expected 1 argument");
			}
			var param1 = args[0];
			return func(param1);
		});
	}
	,BindExternalFunction2: function(funcName,func) {
		if(func == null) {
			throw new js__$Boot_HaxeError("Can't bind a null function");
		}
		this.BindExternalFunctionGeneral(funcName,function(args) {
			if(args.length != 2) {
				throw new js__$Boot_HaxeError("External function expected 2 arguments");
			}
			var param1 = args[0];
			var param2 = args[1];
			return func(param1,param2);
		});
	}
	,BindExternalFunction3: function(funcName,func) {
		if(func == null) {
			throw new js__$Boot_HaxeError("Can't bind a null function");
		}
		this.BindExternalFunctionGeneral(funcName,function(args) {
			if(args.length != 3) {
				throw new js__$Boot_HaxeError("External function expected 3 arguments");
			}
			var param1 = args[0];
			var param2 = args[1];
			var param3 = args[2];
			return func(param1,param2,param3);
		});
	}
	,UnbindExternalFunction: function(funcName) {
		var _this = this._externals;
		if(!(__map_reserved[funcName] != null?_this.existsReserved(funcName):_this.h.hasOwnProperty(funcName))) {
			throw new js__$Boot_HaxeError("Function '" + funcName + "' has not been bound.");
		}
		this._externals.remove(funcName);
	}
	,ValidateExternalBindings: function() {
		this.ValidateExternalBindingsC(this._mainContentContainer);
		this._hasValidatedExternals = true;
	}
	,ValidateExternalBindingsC: function(c) {
		var _g = 0;
		var _g1 = c._content;
		while(_g < _g1.length) {
			var innerContent = _g1[_g];
			++_g;
			this.ValidateExternalBindingsO(innerContent);
		}
		var _this = c.namedContent;
		var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(tmp.hasNext()) {
			var value = tmp.next();
			this.ValidateExternalBindingsO(js_Boot.__instanceof(value,ink_runtime_RObject)?value:null);
		}
	}
	,ValidateExternalBindingsO: function(o) {
		var container = js_Boot.__instanceof(o,ink_runtime_Container)?o:null;
		if(container != null) {
			this.ValidateExternalBindingsC(container);
			return;
		}
		var divert = js_Boot.__instanceof(o,ink_runtime_Divert)?o:null;
		if(divert != null && divert.isExternal) {
			var name = divert.get_targetPathString();
			var _this = this._externals;
			if(!(__map_reserved[name] != null?_this.existsReserved(name):_this.h.hasOwnProperty(name))) {
				var fallbackFunction = null;
				fallbackFunction = this.get_mainContentContainer().namedContent.get(name);
				var fallbackFound = fallbackFunction != null;
				var message = null;
				if(!this.allowExternalFunctionFallbacks) {
					message = "Missing function binding for external '" + name + "' (ink fallbacks disabled)";
				} else if(!fallbackFound) {
					message = "Missing function binding for external '" + name + "', and no fallback ink function found.";
				}
				if(message != null) {
					var errorPreamble = "ERROR: ";
					if(divert.get_debugMetadata() != null) {
						errorPreamble = "ERROR: " + ("'" + divert.get_debugMetadata().fileName + "' line " + divert.get_debugMetadata().startLineNumber + ": ");
					}
					throw new js__$Boot_HaxeError(new ink_runtime_StoryException(errorPreamble + message));
				}
			}
		}
	}
	,ReflectExternalBindings: function(array) {
		if(array == null) {
			array = [];
		}
		this.ReflectExternalBindingsC(this._mainContentContainer,array);
		return array;
	}
	,ReflectExternalBindingsC: function(c,array) {
		var _g = 0;
		var _g1 = c._content;
		while(_g < _g1.length) {
			var innerContent = _g1[_g];
			++_g;
			this.ReflectExternalBindingsO(innerContent,array);
		}
		var _this = c.namedContent;
		var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(tmp.hasNext()) {
			var value = tmp.next();
			this.ReflectExternalBindingsO(js_Boot.__instanceof(value,ink_runtime_RObject)?value:null,array);
		}
	}
	,ReflectExternalBindingsO: function(o,array) {
		var container = js_Boot.__instanceof(o,ink_runtime_Container)?o:null;
		if(container != null) {
			this.ReflectExternalBindingsC(container,array);
			return;
		}
		var divert = js_Boot.__instanceof(o,ink_runtime_Divert)?o:null;
		if(divert != null && divert.isExternal) {
			array.push(divert.get_targetPathString());
		}
	}
	,__class__: ink_runtime_Story
	,__properties__: $extend(ink_runtime_RObject.prototype.__properties__,{get_mainContentContainer:"get_mainContentContainer",get_canContinue:"get_canContinue",get_currentDebugMetadata:"get_currentDebugMetadata",get_state:"get_state",get_variablesState:"get_variablesState",get_hasErrorThrow:"get_hasErrorThrow",get_currentErrors:"get_currentErrors",get_currentText:"get_currentText",get_currentChoices:"get_currentChoices"})
});
var ink_runtime_StoryException = function(message) {
	ink_runtime_SystemException.call(this,message);
};
ink_runtime_StoryException.__name__ = ["ink","runtime","StoryException"];
ink_runtime_StoryException.__super__ = ink_runtime_SystemException;
ink_runtime_StoryException.prototype = $extend(ink_runtime_SystemException.prototype,{
	__class__: ink_runtime_StoryException
});
var ink_runtime_SystemNotImplementedException = function(message) {
	ink_runtime_SystemException.call(this,message);
};
ink_runtime_SystemNotImplementedException.__name__ = ["ink","runtime","SystemNotImplementedException"];
ink_runtime_SystemNotImplementedException.__super__ = ink_runtime_SystemException;
ink_runtime_SystemNotImplementedException.prototype = $extend(ink_runtime_SystemException.prototype,{
	__class__: ink_runtime_SystemNotImplementedException
});
var ink_runtime_StoryState = function(story) {
	this.story = story;
	this._outputStream = [];
	this.evaluationStack = [];
	this.callStack = ink_runtime_CallStack.createCallStack(story.get_rootContentContainer());
	this.variablesState = new ink_runtime_VariablesState(this.callStack);
	this.visitCounts = new haxe_ds_StringMap();
	this.turnIndices = new haxe_ds_StringMap();
	this.currentTurnIndex = -1;
	this.storySeed = (new ink_random_ParkMiller(new Date().getTime() | 0).random() | 0) % 100;
	this.currentChoices = new List();
	this.GoToStart();
};
ink_runtime_StoryState.__name__ = ["ink","runtime","StoryState"];
ink_runtime_StoryState.prototype = {
	ToJson: function() {
		return JSON.stringify(this.get_jsonToken());
	}
	,LoadJson: function(json) {
		this.set_jsonToken(JSON.parse(json));
	}
	,VisitCountAtPathString: function(pathString) {
		var _this = this.visitCounts;
		var visitCountOut = __map_reserved[pathString] != null?_this.getReserved(pathString):_this.h[pathString];
		if(visitCountOut != null && !isNaN(visitCountOut)) {
			return visitCountOut;
		}
		return 0;
	}
	,get_outputStream: function() {
		return this._outputStream;
	}
	,get_currentPath: function() {
		if(this.get_currentContentObject() == null) {
			return null;
		}
		return this.get_currentContentObject().get_path();
	}
	,set_currentPath: function(value) {
		if(value != null) {
			this.set_currentContentObject(this.story.ContentAtPath(value));
		} else {
			this.set_currentContentObject(null);
		}
		if(this.get_currentContentObject() != null) {
			return this.get_currentContentObject().get_path();
		} else {
			return null;
		}
	}
	,get_currentContentObject: function() {
		return this.callStack.get_currentElement().get_currentObject();
	}
	,set_currentContentObject: function(value) {
		this.callStack.get_currentElement().set_currentObject(value);
		return value;
	}
	,get_currentContainer: function() {
		return this.callStack.get_currentElement().currentContainer;
	}
	,get_previousContentObject: function() {
		return this.callStack.get_currentThread().previousContentObject;
	}
	,set_previousContentObject: function(value) {
		this.callStack.get_currentThread().previousContentObject = value;
		return value;
	}
	,get_hasError: function() {
		if(this.currentErrors != null) {
			return this.currentErrors.length > 0;
		} else {
			return false;
		}
	}
	,get_currentText: function() {
		var sb_b = "";
		var _g = 0;
		var _g1 = this._outputStream;
		while(_g < _g1.length) {
			var outputObj = _g1[_g];
			++_g;
			var textContent = js_Boot.__instanceof(outputObj,ink_runtime_StringValue)?outputObj:null;
			if(textContent != null) {
				sb_b += textContent.value == null?"null":"" + textContent.value;
			}
		}
		return sb_b;
	}
	,get_inExpressionEvaluation: function() {
		return this.callStack.get_currentElement().inExpressionEvaluation;
	}
	,set_inExpressionEvaluation: function(value) {
		this.callStack.get_currentElement().inExpressionEvaluation = value;
		return value;
	}
	,GoToStart: function() {
		this.callStack.get_currentElement().currentContainer = this.story.get_mainContentContainer();
		this.callStack.get_currentElement().currentContentIndex = 0;
	}
	,Copy: function() {
		var copy = new ink_runtime_StoryState(this.story);
		ink_runtime_LibUtil.addRangeForArray(copy.get_outputStream(),this._outputStream);
		ink_runtime_LibUtil.addRangeForList(copy.currentChoices,this.currentChoices);
		if(this.get_hasError()) {
			copy.currentErrors = new List();
			ink_runtime_LibUtil.addRangeForList(copy.currentErrors,this.currentErrors);
		}
		copy.callStack = ink_runtime_CallStack.createCallStack2(this.callStack);
		copy._currentRightGlue = this._currentRightGlue;
		copy.variablesState = new ink_runtime_VariablesState(copy.callStack);
		copy.variablesState.CopyFrom(this.variablesState);
		ink_runtime_LibUtil.addRangeForArray(copy.evaluationStack,this.evaluationStack);
		if(this.divertedTargetObject != null) {
			copy.divertedTargetObject = this.divertedTargetObject;
		}
		copy.set_previousContentObject(this.get_previousContentObject());
		copy.visitCounts = ink_runtime_LibUtil.cloneStrIntMap(this.visitCounts);
		copy.turnIndices = ink_runtime_LibUtil.cloneStrIntMap(this.turnIndices);
		copy.currentTurnIndex = this.currentTurnIndex;
		copy.storySeed = this.storySeed;
		copy.didSafeExit = this.didSafeExit;
		return copy;
	}
	,get_jsonToken: function() {
		var obj = { };
		var choiceThreads = null;
		var _g_head = this.currentChoices.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			val.originalChoicePath = val.choicePoint.get_path().get_componentsString();
			val.originalThreadIndex = val.threadAtGeneration.threadIndex;
			if(this.callStack.ThreadWithIndex(val.originalThreadIndex) == null) {
				if(choiceThreads == null) {
					choiceThreads = new haxe_ds_StringMap();
				}
				var k = val.originalThreadIndex == null?"null":"" + val.originalThreadIndex;
				var v = val.threadAtGeneration.get_jsonToken();
				if(__map_reserved[k] != null) {
					choiceThreads.setReserved(k,v);
				} else {
					choiceThreads.h[k] = v;
				}
			}
		}
		if(choiceThreads != null) {
			obj.choiceThreads = choiceThreads;
		}
		obj.callstackThreads = this.callStack.GetJsonToken();
		obj.variablesState = this.variablesState.get_jsonToken();
		var serialisables = this.evaluationStack;
		var jArray = [];
		var _g = 0;
		while(_g < serialisables.length) {
			var s = serialisables[_g];
			++_g;
			jArray.push(ink_runtime_Json.RuntimeObjectToJToken(s));
		}
		obj.evalStack = jArray;
		var serialisables1 = this._outputStream;
		var jArray1 = [];
		var _g1 = 0;
		while(_g1 < serialisables1.length) {
			var s1 = serialisables1[_g1];
			++_g1;
			jArray1.push(ink_runtime_Json.RuntimeObjectToJToken(s1));
		}
		obj.outputStream = jArray1;
		obj.currentChoices = ink_runtime_Json.ListToJArray(this.currentChoices);
		if(this._currentRightGlue != null) {
			var rightGluePos = this._outputStream.indexOf(this._currentRightGlue);
			if(rightGluePos != -1) {
				obj.currRightGlue = rightGluePos;
			}
		}
		if(this.divertedTargetObject != null) {
			obj.currentDivertTarget = this.divertedTargetObject.get_path().get_componentsString();
		}
		obj.visitCounts = ink_runtime_Json.IntDictionaryToJObject(this.visitCounts);
		obj.turnIndices = ink_runtime_Json.IntDictionaryToJObject(this.turnIndices);
		obj.turnIdx = this.currentTurnIndex;
		obj.storySeed = this.storySeed;
		obj.inkSaveVersion = 4;
		obj.inkFormatVersion = 12;
		return obj;
	}
	,set_jsonToken: function(value) {
		var jSaveVersion = null;
		jSaveVersion = Reflect.field(value,"inkSaveVersion");
		if(jSaveVersion == null) {
			throw new js__$Boot_HaxeError(new ink_runtime_StoryException("ink save format incorrect, can't load."));
		} else if((jSaveVersion | 0) < ink_runtime_StoryState.kMinCompatibleLoadVersion) {
			throw new js__$Boot_HaxeError(new ink_runtime_StoryException("Ink save format isn't compatible with the current version (saw '" + Std.string(jSaveVersion) + "', but minimum is " + ink_runtime_StoryState.kMinCompatibleLoadVersion + "), so can't load."));
		}
		this.callStack.SetJsonToken(Reflect.field(value,"callstackThreads"),this.story);
		this.variablesState.set_jsonToken(Reflect.field(value,"variablesState"));
		this.evaluationStack = ink_runtime_Json.JArrayToRuntimeObjArray(Reflect.field(value,"evalStack"));
		this._outputStream = ink_runtime_Json.JArrayToRuntimeObjArray(Reflect.field(value,"outputStream"));
		this.currentChoices = ink_runtime_Json.JArrayToRuntimeObjList(Reflect.field(value,"currentChoices"));
		var propValue = Reflect.field(value,"currRightGlue");
		if(propValue != null) {
			var gluePos = propValue | 0;
			if(gluePos >= 0) {
				var obj = this._outputStream[gluePos];
				this._currentRightGlue = js_Boot.__instanceof(obj,ink_runtime_Glue)?obj:null;
			}
		}
		var currentDivertTargetPath = Reflect.field(value,"currRightGlue");
		if(currentDivertTargetPath != null) {
			this.divertedTargetObject = this.story.ContentAtPath(ink_runtime_Path.createFromString(Std.string(currentDivertTargetPath)));
		}
		this.visitCounts = ink_runtime_Json.JObjectToIntDictionary(Reflect.field(value,"visitCounts"));
		this.turnIndices = ink_runtime_Json.JObjectToIntDictionary(Reflect.field(value,"turnIndices"));
		this.currentTurnIndex = Reflect.field(value,"turnIdx") | 0;
		this.storySeed = Reflect.field(value,"storySeed") | 0;
		var jChoiceThreadsObj = null;
		jChoiceThreadsObj = Reflect.field(value,"choiceThreads");
		var jChoiceThreads = jChoiceThreadsObj;
		var _g_head = this.currentChoices.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			val.choicePoint = this.story.ContentAtPath(ink_runtime_Path.createFromString(val.originalChoicePath));
			var foundActiveThread = this.callStack.ThreadWithIndex(val.originalThreadIndex);
			if(foundActiveThread != null) {
				val.threadAtGeneration = foundActiveThread;
			} else {
				val.threadAtGeneration = ink_runtime_Thread.create(Reflect.field(jChoiceThreads,val.originalThreadIndex == null?"null":"" + val.originalThreadIndex),this.story);
			}
		}
		return value;
	}
	,ResetErrors: function() {
		this.currentErrors = null;
	}
	,ResetOutput: function() {
		this._outputStream.length = 0;
	}
	,PushToOutputStream: function(obj) {
		var text = js_Boot.__instanceof(obj,ink_runtime_StringValue)?obj:null;
		if(text != null) {
			var listText = this.TrySplittingHeadTailWhitespace(text);
			if(listText != null) {
				var _g_head = listText.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					this.PushToOutputStreamIndividual(val);
				}
				return;
			}
		}
		this.PushToOutputStreamIndividual(obj);
	}
	,TrySplittingHeadTailWhitespace: function(single) {
		var str = single.value;
		var headFirstNewlineIdx = -1;
		var headLastNewlineIdx = -1;
		var _g1 = 0;
		var _g = str.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = str.charAt(i);
			if(c == "\n") {
				if(headFirstNewlineIdx == -1) {
					headFirstNewlineIdx = i;
				}
				headLastNewlineIdx = i;
			} else if(c == " " || c == "\t") {
				continue;
			} else {
				break;
			}
		}
		var tailLastNewlineIdx = -1;
		var tailFirstNewlineIdx = -1;
		var _g11 = 0;
		var _g2 = str.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var c1 = str.charAt(i1);
			if(c1 == "\n") {
				if(tailLastNewlineIdx == -1) {
					tailLastNewlineIdx = i1;
				}
				tailFirstNewlineIdx = i1;
			} else if(c1 == " " || c1 == "\t") {
				continue;
			} else {
				break;
			}
		}
		if(headFirstNewlineIdx == -1 && tailLastNewlineIdx == -1) {
			return null;
		}
		var listTexts = new List();
		var innerStrStart = 0;
		var innerStrEnd = str.length;
		if(headFirstNewlineIdx != -1) {
			if(headFirstNewlineIdx > 0) {
				listTexts.add(new ink_runtime_StringValue(str.substring(0,headFirstNewlineIdx)));
			}
			listTexts.add(new ink_runtime_StringValue("\n"));
			innerStrStart = headLastNewlineIdx + 1;
		}
		if(tailLastNewlineIdx != -1) {
			innerStrEnd = tailFirstNewlineIdx;
		}
		if(innerStrEnd > innerStrStart) {
			listTexts.add(new ink_runtime_StringValue(str.substring(innerStrStart,innerStrEnd - innerStrStart)));
		}
		if(tailLastNewlineIdx != -1 && tailFirstNewlineIdx > headLastNewlineIdx) {
			listTexts.add(new ink_runtime_StringValue("\n"));
			if(tailLastNewlineIdx < str.length - 1) {
				listTexts.add(new ink_runtime_StringValue(str.substring(tailLastNewlineIdx + 1,str.length - tailLastNewlineIdx - 1)));
			}
		}
		return listTexts;
	}
	,PushToOutputStreamIndividual: function(obj) {
		var glue = js_Boot.__instanceof(obj,ink_runtime_Glue)?obj:null;
		var text = js_Boot.__instanceof(obj,ink_runtime_StringValue)?obj:null;
		var includeInOutput = true;
		if(glue != null) {
			var foundMatchingLeftGlue = glue.get_isLeft() && this._currentRightGlue != null && glue.parent == this._currentRightGlue.parent;
			if(foundMatchingLeftGlue) {
				this._currentRightGlue = null;
			}
			if(glue.get_isLeft() || glue.get_isBi()) {
				this.TrimNewlinesFromOutputStream(foundMatchingLeftGlue);
			}
			var isNewRightGlue = glue.get_isRight() && this._currentRightGlue == null;
			if(isNewRightGlue) {
				this._currentRightGlue = glue;
			}
			if(!glue.get_isBi()) {
				includeInOutput = isNewRightGlue;
			} else {
				includeInOutput = true;
			}
		} else if(text != null) {
			if(this.get_currentGlueIndex() != -1) {
				if(text.isNewline) {
					this.TrimFromExistingGlue();
					includeInOutput = false;
				} else if(text.get_isNonWhitespace()) {
					this.RemoveExistingGlue();
					this._currentRightGlue = null;
				}
			} else if(text.isNewline) {
				if(this.get_outputStreamEndsInNewline() || !this.get_outputStreamContainsContent()) {
					includeInOutput = false;
				}
			}
		}
		if(includeInOutput) {
			this._outputStream.push(obj);
		}
	}
	,TrimNewlinesFromOutputStream: function(stopAndRemoveRightGlue) {
		var removeWhitespaceFrom = -1;
		var rightGluePos = -1;
		var foundNonWhitespace = false;
		var i = this._outputStream.length - 1;
		while(i >= 0) {
			var obj = this._outputStream[i];
			var cmd = js_Boot.__instanceof(obj,ink_runtime_ControlCommand)?obj:null;
			var txt = js_Boot.__instanceof(obj,ink_runtime_StringValue)?obj:null;
			var glue = js_Boot.__instanceof(obj,ink_runtime_Glue)?obj:null;
			if(cmd != null || txt != null && txt.get_isNonWhitespace()) {
				foundNonWhitespace = true;
				if(!stopAndRemoveRightGlue) {
					break;
				}
			} else if(stopAndRemoveRightGlue && glue != null && glue.get_isRight()) {
				rightGluePos = i;
				break;
			} else if(txt != null && txt.isNewline && !foundNonWhitespace) {
				removeWhitespaceFrom = i;
			}
			--i;
		}
		if(removeWhitespaceFrom >= 0) {
			i = removeWhitespaceFrom;
			while(i < this._outputStream.length) {
				var obj1 = this._outputStream[i];
				if((js_Boot.__instanceof(obj1,ink_runtime_StringValue)?obj1:null) != null) {
					this._outputStream.splice(i,1);
				} else {
					++i;
				}
			}
		}
		if(stopAndRemoveRightGlue && rightGluePos > -1) {
			this.get_outputStream().splice(rightGluePos,1);
		}
	}
	,TrimFromExistingGlue: function() {
		var i = this.get_currentGlueIndex();
		while(i < this._outputStream.length) {
			var obj = this._outputStream[i];
			var txt = js_Boot.__instanceof(obj,ink_runtime_StringValue)?obj:null;
			if(txt != null && !txt.get_isNonWhitespace()) {
				this._outputStream.splice(i,1);
			} else {
				++i;
			}
		}
	}
	,RemoveExistingGlue: function() {
		var i = this.get_outputStream().length;
		while(i >= 0) {
			var c = this._outputStream[i];
			if(js_Boot.__instanceof(c,ink_runtime_Glue)) {
				this.get_outputStream().splice(i,1);
			} else if(js_Boot.__instanceof(c,ink_runtime_ControlCommand)) {
				break;
			}
			--i;
		}
	}
	,get_currentGlueIndex: function() {
		var i = this._outputStream.length - 1;
		while(i >= 0) {
			var c = this._outputStream[i];
			if((js_Boot.__instanceof(c,ink_runtime_Glue)?c:null) != null) {
				return i;
			} else if(js_Boot.__instanceof(c,ink_runtime_ControlCommand)) {
				break;
			}
			--i;
		}
		return -1;
	}
	,get_outputStreamEndsInNewline: function() {
		if(this._outputStream.length > 0) {
			var i = this._outputStream.length - 1;
			while(i >= 0) {
				if(js_Boot.__instanceof(this._outputStream[i],ink_runtime_ControlCommand)) {
					break;
				}
				var obj = this._outputStream[i];
				var text = js_Boot.__instanceof(obj,ink_runtime_StringValue)?obj:null;
				if(text != null) {
					if(text.isNewline) {
						return true;
					} else if(text.get_isNonWhitespace()) {
						break;
					}
				}
				--i;
			}
		}
		return false;
	}
	,get_outputStreamContainsContent: function() {
		var _g = 0;
		var _g1 = this._outputStream;
		while(_g < _g1.length) {
			var content = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(content,ink_runtime_StringValue)) {
				return true;
			}
		}
		return false;
	}
	,get_inStringEvaluation: function() {
		var i = this._outputStream.length - 1;
		while(i >= 0) {
			var obj = this._outputStream[i];
			var cmd = js_Boot.__instanceof(obj,ink_runtime_ControlCommand)?obj:null;
			if(cmd != null && cmd.commandType == 7) {
				return true;
			}
			--i;
		}
		return false;
	}
	,PushEvaluationStack: function(obj) {
		this.evaluationStack.push(obj);
	}
	,PopEvaluationStack: function() {
		return this.evaluationStack.pop();
	}
	,PeekEvaluationStack: function() {
		return this.evaluationStack[this.evaluationStack.length - 1];
	}
	,PopEvaluationStack1: function(numberOfObjects) {
		if(numberOfObjects > this.evaluationStack.length) {
			throw new js__$Boot_HaxeError(new ink_runtime_SystemException("trying to pop too many objects"));
		}
		var popped = this.evaluationStack.slice(this.evaluationStack.length - numberOfObjects,this.evaluationStack.length - numberOfObjects + numberOfObjects);
		this.evaluationStack.splice(this.evaluationStack.length - numberOfObjects,numberOfObjects);
		return popped;
	}
	,ForceEndFlow: function() {
		this.set_currentContentObject(null);
		while(this.callStack.get_canPopThread()) this.callStack.PopThread();
		while(this.callStack.get_canPop()) this.callStack.Pop();
		this.currentChoices.clear();
		this.didSafeExit = true;
	}
	,SetChosenPath: function(path) {
		this.currentChoices.clear();
		this.set_currentPath(path);
		this.currentTurnIndex++;
	}
	,AddError: function(message) {
		if(this.currentErrors == null) {
			this.currentErrors = new List();
		}
		this.currentErrors.add(message);
	}
	,__class__: ink_runtime_StoryState
	,__properties__: {get_inStringEvaluation:"get_inStringEvaluation",get_outputStreamContainsContent:"get_outputStreamContainsContent",get_outputStreamEndsInNewline:"get_outputStreamEndsInNewline",get_currentGlueIndex:"get_currentGlueIndex",set_jsonToken:"set_jsonToken",get_jsonToken:"get_jsonToken",set_inExpressionEvaluation:"set_inExpressionEvaluation",get_inExpressionEvaluation:"get_inExpressionEvaluation",get_currentText:"get_currentText",get_hasError:"get_hasError",set_previousContentObject:"set_previousContentObject",get_previousContentObject:"get_previousContentObject",get_currentContainer:"get_currentContainer",set_currentContentObject:"set_currentContentObject",get_currentContentObject:"get_currentContentObject",set_currentPath:"set_currentPath",get_currentPath:"get_currentPath",get_outputStream:"get_outputStream"}
};
var ink_runtime_Value = function(val) {
	ink_runtime_RObject.call(this);
	this.value = val;
};
ink_runtime_Value.__name__ = ["ink","runtime","Value"];
ink_runtime_Value.Create = function(val) {
	if(typeof(val) == "boolean") {
		val = (val?1:0) | 0;
	}
	if(typeof(val) == "number" && ((val | 0) === val)) {
		return new ink_runtime_IntValue(val);
	} else if(typeof(val) == "number") {
		return new ink_runtime_FloatValue(val);
	} else if(typeof(val) == "string") {
		return new ink_runtime_StringValue(val);
	} else if(js_Boot.__instanceof(val,ink_runtime_Path)) {
		return new ink_runtime_DivertTargetValue(val);
	}
	return null;
};
ink_runtime_Value.__super__ = ink_runtime_RObject;
ink_runtime_Value.prototype = $extend(ink_runtime_RObject.prototype,{
	Cast: function(newType) {
		return null;
	}
	,Copy: function() {
		return ink_runtime_Value.Create(this.get_valueObject());
	}
	,ToString: function() {
		return Std.string(this.value);
	}
	,toString: function() {
		return this.ToString();
	}
	,get_valueType: function() {
		return this.valueType;
	}
	,get_isTruthy: function() {
		return this.isTruthy;
	}
	,get_valueObject: function() {
		return this.value;
	}
	,__class__: ink_runtime_Value
	,__properties__: $extend(ink_runtime_RObject.prototype.__properties__,{get_valueObject:"get_valueObject",get_isTruthy:"get_isTruthy",get_valueType:"get_valueType"})
});
var ink_runtime_IntValue = function(val) {
	if(val == null) {
		val = 0;
	}
	ink_runtime_Value.call(this,val);
};
ink_runtime_IntValue.__name__ = ["ink","runtime","IntValue"];
ink_runtime_IntValue.__super__ = ink_runtime_Value;
ink_runtime_IntValue.prototype = $extend(ink_runtime_Value.prototype,{
	get_valueType: function() {
		return 0;
	}
	,get_isTruthy: function() {
		return this.value != 0;
	}
	,Cast: function(newType) {
		if(newType == this.get_valueType()) {
			return this;
		}
		if(newType == 0) {
			return new ink_runtime_IntValue(this.value);
		}
		if(newType == 2) {
			return new ink_runtime_StringValue("" + this.value);
		}
		throw new js__$Boot_HaxeError(new ink_runtime_SystemException("Unexpected type cast of Value to new ValueType"));
	}
	,__class__: ink_runtime_IntValue
});
var ink_runtime_FloatValue = function(val) {
	ink_runtime_Value.call(this,val);
};
ink_runtime_FloatValue.__name__ = ["ink","runtime","FloatValue"];
ink_runtime_FloatValue.__super__ = ink_runtime_Value;
ink_runtime_FloatValue.prototype = $extend(ink_runtime_Value.prototype,{
	Cast: function(newType) {
		if(newType == this.get_valueType()) {
			return this;
		}
		if(newType == 1) {
			return new ink_runtime_FloatValue(this.value);
		}
		if(newType == 2) {
			return new ink_runtime_StringValue("" + this.value);
		}
		throw new js__$Boot_HaxeError(new ink_runtime_SystemException("Unexpected type cast of Value to new ValueType"));
	}
	,__class__: ink_runtime_FloatValue
});
var ink_runtime_StringValue = function(val) {
	if(val == null) {
		val = "";
	}
	ink_runtime_Value.call(this,val);
	this.isNewline = this.value == "\n";
	this.isInlineWhitespace = true;
	var _g1 = 0;
	var _g = this.value.length;
	while(_g1 < _g) {
		var c = this.value.charAt(_g1++);
		if(c != " " && c != "\t") {
			this.isInlineWhitespace = false;
			break;
		}
	}
};
ink_runtime_StringValue.__name__ = ["ink","runtime","StringValue"];
ink_runtime_StringValue.__super__ = ink_runtime_Value;
ink_runtime_StringValue.prototype = $extend(ink_runtime_Value.prototype,{
	get_valueType: function() {
		return 2;
	}
	,get_isTruthy: function() {
		return this.value.length > 0;
	}
	,get_isNonWhitespace: function() {
		if(!this.isNewline) {
			return !this.isInlineWhitespace;
		} else {
			return false;
		}
	}
	,Cast: function(newType) {
		var tryVal;
		if(newType == this.get_valueType()) {
			return this;
		}
		if(newType == 0) {
			tryVal = Std.parseInt(this.value);
			if(tryVal != null) {
				return new ink_runtime_IntValue(tryVal);
			} else {
				return null;
			}
		}
		if(newType == 1) {
			tryVal = parseFloat(this.value);
			if(tryVal != null) {
				return new ink_runtime_FloatValue(tryVal);
			} else {
				return null;
			}
		}
		throw new js__$Boot_HaxeError(new ink_runtime_SystemException("Unexpected type cast of Value to new ValueType"));
	}
	,__class__: ink_runtime_StringValue
	,__properties__: $extend(ink_runtime_Value.prototype.__properties__,{get_isNonWhitespace:"get_isNonWhitespace"})
});
var ink_runtime_DivertTargetValue = function(val) {
	ink_runtime_Value.call(this,val);
};
ink_runtime_DivertTargetValue.__name__ = ["ink","runtime","DivertTargetValue"];
ink_runtime_DivertTargetValue.__super__ = ink_runtime_Value;
ink_runtime_DivertTargetValue.prototype = $extend(ink_runtime_Value.prototype,{
	get_targetPath: function() {
		return this.value;
	}
	,set_targetPath: function(value) {
		return this.value = value;
	}
	,get_valueType: function() {
		return 3;
	}
	,get_isTruthy: function() {
		throw new js__$Boot_HaxeError(new ink_runtime_SystemException("Shouldn't be checking the truthiness of a divert target"));
	}
	,Cast: function(newType) {
		if(newType == this.get_valueType()) {
			return this;
		}
		throw new js__$Boot_HaxeError(new ink_runtime_SystemException("Unexpected type cast of Value to new ValueType"));
	}
	,ToString: function() {
		return "DivertTargetValue(" + Std.string(this.get_targetPath()) + ")";
	}
	,__class__: ink_runtime_DivertTargetValue
	,__properties__: $extend(ink_runtime_Value.prototype.__properties__,{set_targetPath:"set_targetPath",get_targetPath:"get_targetPath"})
});
var ink_runtime_VariablePointerValue = function(variableName,contextIndex) {
	if(contextIndex == null) {
		contextIndex = -1;
	}
	ink_runtime_Value.call(this,variableName);
	this.contextIndex = contextIndex;
};
ink_runtime_VariablePointerValue.__name__ = ["ink","runtime","VariablePointerValue"];
ink_runtime_VariablePointerValue.__super__ = ink_runtime_Value;
ink_runtime_VariablePointerValue.prototype = $extend(ink_runtime_Value.prototype,{
	get_variableName: function() {
		return this.value;
	}
	,set_variableName: function(value) {
		return this.value = value;
	}
	,get_valueType: function() {
		return 4;
	}
	,get_isTruthy: function() {
		throw new js__$Boot_HaxeError(new ink_runtime_SystemException("Shouldn't be checking the truthiness of a variable pointer"));
	}
	,Cast: function(newType) {
		if(newType == this.get_valueType()) {
			return this;
		}
		throw new js__$Boot_HaxeError(new ink_runtime_SystemException("Unexpected type cast of Value to new ValueType"));
	}
	,ToString: function() {
		return "VariablePointerValue(" + this.get_variableName() + ")";
	}
	,Copy: function() {
		return new ink_runtime_VariablePointerValue(this.get_variableName(),this.contextIndex);
	}
	,__class__: ink_runtime_VariablePointerValue
	,__properties__: $extend(ink_runtime_Value.prototype.__properties__,{set_variableName:"set_variableName",get_variableName:"get_variableName"})
});
var ink_runtime_VariableAssignment = function(variableName,isNewDeclaration) {
	if(isNewDeclaration == null) {
		isNewDeclaration = false;
	}
	ink_runtime_RObject.call(this);
	this.variableName = variableName;
	this.isNewDeclaration = isNewDeclaration;
};
ink_runtime_VariableAssignment.__name__ = ["ink","runtime","VariableAssignment"];
ink_runtime_VariableAssignment.__super__ = ink_runtime_RObject;
ink_runtime_VariableAssignment.prototype = $extend(ink_runtime_RObject.prototype,{
	toString: function() {
		return "VarAssign to " + this.variableName;
	}
	,__class__: ink_runtime_VariableAssignment
});
var ink_runtime_VariableReference = function() {
	ink_runtime_RObject.call(this);
};
ink_runtime_VariableReference.__name__ = ["ink","runtime","VariableReference"];
ink_runtime_VariableReference.create = function(name) {
	var me = new ink_runtime_VariableReference();
	me.name = name;
	return me;
};
ink_runtime_VariableReference.__super__ = ink_runtime_RObject;
ink_runtime_VariableReference.prototype = $extend(ink_runtime_RObject.prototype,{
	get_containerForCount: function() {
		var obj = this.ResolvePath(this.pathForCount);
		if(js_Boot.__instanceof(obj,ink_runtime_Container)) {
			return obj;
		} else {
			return null;
		}
	}
	,get_pathStringForCount: function() {
		if(this.pathForCount == null) {
			return null;
		}
		return this.CompactPathString(this.pathForCount);
	}
	,set_pathStringForCount: function(value) {
		if(value == null) {
			this.pathForCount = null;
		} else {
			this.pathForCount = ink_runtime_Path.createFromString(value);
		}
		return value;
	}
	,toString: function() {
		if(this.name != null) {
			return "var(" + this.name + ")";
		} else {
			return "read_count(" + this.get_pathStringForCount() + ")";
		}
	}
	,__class__: ink_runtime_VariableReference
	,__properties__: $extend(ink_runtime_RObject.prototype.__properties__,{set_pathStringForCount:"set_pathStringForCount",get_pathStringForCount:"get_pathStringForCount",get_containerForCount:"get_containerForCount"})
});
var ink_runtime_VariablesState = function(callStack) {
	this.variableChangedEventCallbacks = [];
	this._globalVariables = new haxe_ds_StringMap();
	this._callStack = callStack;
	this._jsProxy = new Proxy(this,new ink_runtime_js_JSProxyTrap());
};
ink_runtime_VariablesState.__name__ = ["ink","runtime","VariablesState"];
ink_runtime_VariablesState.__interfaces__ = [ink_runtime_IProxy];
ink_runtime_VariablesState.prototype = {
	ObserveVariableChange: function(callback) {
		var _gthis = this;
		if(this.variableChangedEvent == null) {
			this.variableChangedEvent = function(variableName,newValue) {
				var _g = 0;
				var _g1 = _gthis.variableChangedEventCallbacks;
				while(_g < _g1.length) {
					var cb = _g1[_g];
					++_g;
					cb(variableName,newValue);
				}
			};
		}
		this.variableChangedEventCallbacks.push(callback);
	}
	,get_batchObservingVariableChanges: function() {
		return this._batchObservingVariableChanges;
	}
	,set_batchObservingVariableChanges: function(value) {
		this._batchObservingVariableChanges = value;
		if(value) {
			this._changedVariables = new ink_runtime_HashSetString();
		} else {
			if(this._changedVariables != null) {
				var tmp = this._changedVariables.keys();
				while(tmp.hasNext()) {
					var variableName = tmp.next();
					var _this = this._globalVariables;
					this.variableChangedEvent(variableName,__map_reserved[variableName] != null?_this.getReserved(variableName):_this.h[variableName]);
				}
			}
			this._changedVariables = null;
		}
		return this._batchObservingVariableChanges;
	}
	,field: function(variableName) {
		var varContents;
		var map = this._globalVariables;
		varContents = __map_reserved[variableName] != null?map.getReserved(variableName):map.h[variableName];
		if(varContents != null) {
			return (js_Boot.__instanceof(varContents,ink_runtime_Value)?varContents:null).get_valueObject();
		} else {
			return null;
		}
	}
	,setField: function(variableName,value) {
		var val = ink_runtime_Value.Create(value);
		if(val == null) {
			if(value == null) {
				throw new js__$Boot_HaxeError(new ink_runtime_StoryException("Cannot pass null to VariableState"));
			} else {
				throw new js__$Boot_HaxeError(new ink_runtime_StoryException("Invalid value passed to VariableState: " + Std.string(value)));
			}
		}
		this.SetGlobal(variableName,val);
	}
	,get_jsProxy: function() {
		return this._jsProxy;
	}
	,CopyFrom: function(varState) {
		this._globalVariables = ink_runtime_LibUtil.cloneStrMap(varState._globalVariables);
		this.variableChangedEvent = varState.variableChangedEvent;
		if(varState.get_batchObservingVariableChanges() != this.get_batchObservingVariableChanges()) {
			if(varState.get_batchObservingVariableChanges()) {
				this._batchObservingVariableChanges = true;
				this._changedVariables = varState._changedVariables.clone();
			} else {
				this._batchObservingVariableChanges = false;
				this._changedVariables = null;
			}
		}
	}
	,get_jsonToken: function() {
		return ink_runtime_Json.DictionaryRuntimeObjsToJObject(this._globalVariables);
	}
	,set_jsonToken: function(value) {
		return this._globalVariables = ink_runtime_Json.JObjectToDictionaryRuntimeObjs(value);
	}
	,GetVariableWithName: function(name) {
		return this._GetVariableWithName(name,-1);
	}
	,_GetVariableWithName: function(name,contextIndex) {
		var varValue = this.GetRawVariableWithName(name,contextIndex);
		var varPointer = js_Boot.__instanceof(varValue,ink_runtime_VariablePointerValue)?varValue:null;
		if(varPointer != null) {
			varValue = this.ValueAtVariablePointer(varPointer);
		}
		return varValue;
	}
	,GetRawVariableWithName: function(name,contextIndex) {
		var varValue = null;
		if(contextIndex == 0 || contextIndex == -1) {
			var map = this._globalVariables;
			varValue = __map_reserved[name] != null?map.getReserved(name):map.h[name];
			if(varValue != null) {
				return varValue;
			}
		}
		varValue = this._callStack.GetTemporaryVariableWithName(name,contextIndex);
		if(varValue == null) {
			throw new js__$Boot_HaxeError(new ink_runtime_SystemException("RUNTIME ERROR: Variable '" + name + "' could not be found in context '" + contextIndex + "'. This shouldn't be possible so is a bug in the ink engine. Please try to construct a minimal story that reproduces the problem and report to inkle, thank you!"));
		}
		return varValue;
	}
	,ValueAtVariablePointer: function(pointer) {
		return this._GetVariableWithName(pointer.get_variableName(),pointer.contextIndex);
	}
	,Assign: function(varAss,value) {
		var name = varAss.variableName;
		var contextIndex = -1;
		var setGlobal = false;
		if(varAss.isNewDeclaration) {
			setGlobal = varAss.isGlobal;
		} else {
			var _this = this._globalVariables;
			if(__map_reserved[name] != null) {
				setGlobal = _this.existsReserved(name);
			} else {
				setGlobal = _this.h.hasOwnProperty(name);
			}
		}
		if(varAss.isNewDeclaration) {
			var varPointer = js_Boot.__instanceof(value,ink_runtime_VariablePointerValue)?value:null;
			if(varPointer != null) {
				value = this.ResolveVariablePointer(varPointer);
			}
		} else {
			var existingPointer = null;
			while(true) {
				var obj = this.GetRawVariableWithName(name,contextIndex);
				if(js_Boot.__instanceof(obj,ink_runtime_VariablePointerValue)) {
					existingPointer = obj;
				} else {
					existingPointer = null;
				}
				if(existingPointer != null) {
					name = existingPointer.get_variableName();
					contextIndex = existingPointer.contextIndex;
					setGlobal = contextIndex == 0;
				}
				if(!(existingPointer != null)) {
					break;
				}
			}
		}
		if(setGlobal) {
			this.SetGlobal(name,value);
		} else {
			this._callStack.SetTemporaryVariable(name,value,varAss.isNewDeclaration,contextIndex);
		}
	}
	,SetGlobal: function(variableName,value) {
		var oldValue = null;
		var map = this._globalVariables;
		oldValue = __map_reserved[variableName] != null?map.getReserved(variableName):map.h[variableName];
		var _this = this._globalVariables;
		if(__map_reserved[variableName] != null) {
			_this.setReserved(variableName,value);
		} else {
			_this.h[variableName] = value;
		}
		if(this.variableChangedEvent != null && !value.Equals(oldValue)) {
			if(this.get_batchObservingVariableChanges()) {
				this._changedVariables.add(variableName);
			} else {
				this.variableChangedEvent(variableName,value);
			}
		}
	}
	,ResolveVariablePointer: function(varPointer) {
		var contextIndex = varPointer.contextIndex;
		if(contextIndex == -1) {
			contextIndex = this.GetContextIndexOfVariableNamed(varPointer.get_variableName());
		}
		var valueOfVariablePointedTo = this.GetRawVariableWithName(varPointer.get_variableName(),contextIndex);
		var doubleRedirectionPointer = js_Boot.__instanceof(valueOfVariablePointedTo,ink_runtime_VariablePointerValue)?valueOfVariablePointedTo:null;
		if(doubleRedirectionPointer != null) {
			return doubleRedirectionPointer;
		} else {
			return new ink_runtime_VariablePointerValue(varPointer.get_variableName(),contextIndex);
		}
	}
	,GetContextIndexOfVariableNamed: function(varName) {
		var _this = this._globalVariables;
		if(__map_reserved[varName] != null?_this.existsReserved(varName):_this.h.hasOwnProperty(varName)) {
			return 0;
		}
		return this._callStack.get_currentElementIndex();
	}
	,__class__: ink_runtime_VariablesState
	,__properties__: {set_jsonToken:"set_jsonToken",get_jsonToken:"get_jsonToken",get_jsProxy:"get_jsProxy",set_batchObservingVariableChanges:"set_batchObservingVariableChanges",get_batchObservingVariableChanges:"get_batchObservingVariableChanges"}
};
var ink_runtime_VoidObj = function() {
	ink_runtime_RObject.call(this);
};
ink_runtime_VoidObj.__name__ = ["ink","runtime","VoidObj"];
ink_runtime_VoidObj.__super__ = ink_runtime_RObject;
ink_runtime_VoidObj.prototype = $extend(ink_runtime_RObject.prototype,{
	__class__: ink_runtime_VoidObj
});
var ink_runtime_js_JSProxyTrap = function() {
};
ink_runtime_js_JSProxyTrap.__name__ = ["ink","runtime","js","JSProxyTrap"];
ink_runtime_js_JSProxyTrap.prototype = {
	get: function(target,property) {
		return target.field(property);
	}
	,set: function(target,property,value) {
		target.setField(property,value);
	}
	,__class__: ink_runtime_js_JSProxyTrap
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class && o.__name__ != null) {
			return true;
		}
		if(cl == Enum && o.__ename__ != null) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
haxe_ds_ObjectMap.count = 0;
ink_random_Limits.INT8_MIN = -128;
ink_random_Limits.INT8_MAX = 127;
ink_random_Limits.UINT8_MAX = 255;
ink_random_Limits.INT16_MIN = -32768;
ink_random_Limits.INT16_MAX = 32767;
ink_random_Limits.UINT16_MAX = 65535;
ink_random_Limits.INT32_MIN = -2147483648;
ink_random_Limits.INT32_MAX = 2147483647;
ink_random_Limits.UINT32_MAX = -1;
ink_random_Limits.INT_BITS = 32;
ink_random_Limits.FLOAT_MAX = 3.4028234663852886e+38;
ink_random_Limits.FLOAT_MIN = -3.4028234663852886e+38;
ink_random_Limits.DOUBLE_MAX = 1.7976931348623157e+308;
ink_random_Limits.DOUBLE_MIN = -1.7976931348623157e+308;
ink_runtime_CountFlags.Visits = 1;
ink_runtime_CountFlags.Turns = 2;
ink_runtime_CountFlags.CountStartOnly = 4;
ink_runtime_Json._controlCommandNames = (function($this) {
	var $r;
	ink_runtime_Json._controlCommandNames = [];
	ink_runtime_Json._controlCommandNames[0] = "ev";
	ink_runtime_Json._controlCommandNames[1] = "out";
	ink_runtime_Json._controlCommandNames[2] = "/ev";
	ink_runtime_Json._controlCommandNames[3] = "du";
	ink_runtime_Json._controlCommandNames[4] = "pop";
	ink_runtime_Json._controlCommandNames[5] = "~ret";
	ink_runtime_Json._controlCommandNames[6] = "->->";
	ink_runtime_Json._controlCommandNames[7] = "str";
	ink_runtime_Json._controlCommandNames[8] = "/str";
	ink_runtime_Json._controlCommandNames[9] = "nop";
	ink_runtime_Json._controlCommandNames[10] = "choiceCnt";
	ink_runtime_Json._controlCommandNames[11] = "turns";
	ink_runtime_Json._controlCommandNames[12] = "visit";
	ink_runtime_Json._controlCommandNames[13] = "seq";
	ink_runtime_Json._controlCommandNames[14] = "thread";
	ink_runtime_Json._controlCommandNames[15] = "done";
	ink_runtime_Json._controlCommandNames[16] = "end";
	{
		var _g1 = 0;
		while(_g1 < 17) if(ink_runtime_Json._controlCommandNames[_g1++] == null) {
			throw new js__$Boot_HaxeError(new ink_runtime_SystemException("Control command not accounted for in serialisation"));
		}
	}
	$r = ink_runtime_Json._controlCommandNames;
	return $r;
}(this));
ink_runtime_NativeFunctionCall.Add = "+";
ink_runtime_NativeFunctionCall.Subtract = "-";
ink_runtime_NativeFunctionCall.Divide = "/";
ink_runtime_NativeFunctionCall.Multiply = "*";
ink_runtime_NativeFunctionCall.Mod = "%";
ink_runtime_NativeFunctionCall.Negate = "~";
ink_runtime_NativeFunctionCall.Equal = "==";
ink_runtime_NativeFunctionCall.Greater = ">";
ink_runtime_NativeFunctionCall.Less = "<";
ink_runtime_NativeFunctionCall.GreaterThanOrEquals = ">=";
ink_runtime_NativeFunctionCall.LessThanOrEquals = "<=";
ink_runtime_NativeFunctionCall.NotEquals = "!=";
ink_runtime_NativeFunctionCall.Not = "!";
ink_runtime_NativeFunctionCall.And = "&&";
ink_runtime_NativeFunctionCall.Or = "||";
ink_runtime_NativeFunctionCall.Min = "MIN";
ink_runtime_NativeFunctionCall.Max = "MAX";
ink_runtime_Path.parentId = "^";
ink_runtime_Story.inkVersionCurrent = 12;
ink_runtime_Story.inkVersionMinimumCompatible = 12;
ink_runtime_StoryState.kInkSaveStateVersion = 4;
ink_runtime_StoryState.kMinCompatibleLoadVersion = 4;
js_Boot.__toStr = { }.toString;
InkRuntime.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
